// generated by wraplib.py
// --- begin functions to be implemented
#ifndef _WRAPLIB_API_CALL
#define _WRAPLIB_API_CALL
#endif
#ifndef _WRAPLIB_CALLBACK
#define _WRAPLIB_CALLBACK
#endif
#ifndef ON_ENTRY
#define ON_ENTRY(x)
#endif
static void* get_library_handle();
static void* resolve_library_func(void* , const char*);
namespace {
template<typename T> T on_init_failed(int func_idx);
}
// --- end functions to be implemented
#include <mutex>
#include <cstddef>
static void load_library();
static cl_int _WRAPLIB_API_CALL clGetPlatformIDs_init(cl_uint arg0, cl_platform_id *arg1, cl_uint *arg2) {
    load_library();
    return clGetPlatformIDs(arg0, arg1, arg2);
}
static cl_int _WRAPLIB_API_CALL clGetPlatformIDs_error(cl_uint, cl_platform_id *, cl_uint *) {
    return on_init_failed<cl_int >(0);
}
static cl_int _WRAPLIB_API_CALL clGetPlatformInfo_init(cl_platform_id arg0, cl_platform_info arg1, size_t arg2, void *arg3, size_t *arg4) {
    load_library();
    return clGetPlatformInfo(arg0, arg1, arg2, arg3, arg4);
}
static cl_int _WRAPLIB_API_CALL clGetPlatformInfo_error(cl_platform_id, cl_platform_info, size_t, void *, size_t *) {
    return on_init_failed<cl_int >(1);
}
static cl_int _WRAPLIB_API_CALL clGetDeviceIDs_init(cl_platform_id arg0, cl_device_type arg1, cl_uint arg2, cl_device_id *arg3, cl_uint *arg4) {
    load_library();
    return clGetDeviceIDs(arg0, arg1, arg2, arg3, arg4);
}
static cl_int _WRAPLIB_API_CALL clGetDeviceIDs_error(cl_platform_id, cl_device_type, cl_uint, cl_device_id *, cl_uint *) {
    return on_init_failed<cl_int >(2);
}
static cl_int _WRAPLIB_API_CALL clGetDeviceInfo_init(cl_device_id arg0, cl_device_info arg1, size_t arg2, void *arg3, size_t *arg4) {
    load_library();
    return clGetDeviceInfo(arg0, arg1, arg2, arg3, arg4);
}
static cl_int _WRAPLIB_API_CALL clGetDeviceInfo_error(cl_device_id, cl_device_info, size_t, void *, size_t *) {
    return on_init_failed<cl_int >(3);
}
static cl_int _WRAPLIB_API_CALL clCreateSubDevices_init(cl_device_id arg0, const cl_device_partition_property *arg1, cl_uint arg2, cl_device_id *arg3, cl_uint *arg4) {
    load_library();
    return clCreateSubDevices(arg0, arg1, arg2, arg3, arg4);
}
static cl_int _WRAPLIB_API_CALL clCreateSubDevices_error(cl_device_id, const cl_device_partition_property *, cl_uint, cl_device_id *, cl_uint *) {
    return on_init_failed<cl_int >(4);
}
static cl_int _WRAPLIB_API_CALL clRetainDevice_init(cl_device_id arg0) {
    load_library();
    return clRetainDevice(arg0);
}
static cl_int _WRAPLIB_API_CALL clRetainDevice_error(cl_device_id) {
    return on_init_failed<cl_int >(5);
}
static cl_int _WRAPLIB_API_CALL clReleaseDevice_init(cl_device_id arg0) {
    load_library();
    return clReleaseDevice(arg0);
}
static cl_int _WRAPLIB_API_CALL clReleaseDevice_error(cl_device_id) {
    return on_init_failed<cl_int >(6);
}
static cl_int _WRAPLIB_API_CALL clSetDefaultDeviceCommandQueue_init(cl_context arg0, cl_device_id arg1, cl_command_queue arg2) {
    load_library();
    return clSetDefaultDeviceCommandQueue(arg0, arg1, arg2);
}
static cl_int _WRAPLIB_API_CALL clSetDefaultDeviceCommandQueue_error(cl_context, cl_device_id, cl_command_queue) {
    return on_init_failed<cl_int >(7);
}
static cl_int _WRAPLIB_API_CALL clGetDeviceAndHostTimer_init(cl_device_id arg0, cl_ulong *arg1, cl_ulong *arg2) {
    load_library();
    return clGetDeviceAndHostTimer(arg0, arg1, arg2);
}
static cl_int _WRAPLIB_API_CALL clGetDeviceAndHostTimer_error(cl_device_id, cl_ulong *, cl_ulong *) {
    return on_init_failed<cl_int >(8);
}
static cl_int _WRAPLIB_API_CALL clGetHostTimer_init(cl_device_id arg0, cl_ulong *arg1) {
    load_library();
    return clGetHostTimer(arg0, arg1);
}
static cl_int _WRAPLIB_API_CALL clGetHostTimer_error(cl_device_id, cl_ulong *) {
    return on_init_failed<cl_int >(9);
}
static cl_context _WRAPLIB_API_CALL clCreateContext_init(const cl_context_properties *arg0, cl_uint arg1, const cl_device_id *arg2, void (_WRAPLIB_CALLBACK *arg3)(const char *, const void *, size_t, void *), void *arg4, cl_int *arg5) {
    load_library();
    return clCreateContext(arg0, arg1, arg2, arg3, arg4, arg5);
}
static cl_context _WRAPLIB_API_CALL clCreateContext_error(const cl_context_properties *, cl_uint, const cl_device_id *, void (_WRAPLIB_CALLBACK *)(const char *, const void *, size_t, void *), void *, cl_int *) {
    return on_init_failed<cl_context >(10);
}
static cl_context _WRAPLIB_API_CALL clCreateContextFromType_init(const cl_context_properties *arg0, cl_device_type arg1, void (_WRAPLIB_CALLBACK *arg2)(const char *, const void *, size_t, void *), void *arg3, cl_int *arg4) {
    load_library();
    return clCreateContextFromType(arg0, arg1, arg2, arg3, arg4);
}
static cl_context _WRAPLIB_API_CALL clCreateContextFromType_error(const cl_context_properties *, cl_device_type, void (_WRAPLIB_CALLBACK *)(const char *, const void *, size_t, void *), void *, cl_int *) {
    return on_init_failed<cl_context >(11);
}
static cl_int _WRAPLIB_API_CALL clRetainContext_init(cl_context arg0) {
    load_library();
    return clRetainContext(arg0);
}
static cl_int _WRAPLIB_API_CALL clRetainContext_error(cl_context) {
    return on_init_failed<cl_int >(12);
}
static cl_int _WRAPLIB_API_CALL clReleaseContext_init(cl_context arg0) {
    load_library();
    return clReleaseContext(arg0);
}
static cl_int _WRAPLIB_API_CALL clReleaseContext_error(cl_context) {
    return on_init_failed<cl_int >(13);
}
static cl_int _WRAPLIB_API_CALL clGetContextInfo_init(cl_context arg0, cl_context_info arg1, size_t arg2, void *arg3, size_t *arg4) {
    load_library();
    return clGetContextInfo(arg0, arg1, arg2, arg3, arg4);
}
static cl_int _WRAPLIB_API_CALL clGetContextInfo_error(cl_context, cl_context_info, size_t, void *, size_t *) {
    return on_init_failed<cl_int >(14);
}
static cl_int _WRAPLIB_API_CALL clSetContextDestructorCallback_init(cl_context arg0, void (_WRAPLIB_CALLBACK *arg1)(cl_context, void *), void *arg2) {
    load_library();
    return clSetContextDestructorCallback(arg0, arg1, arg2);
}
static cl_int _WRAPLIB_API_CALL clSetContextDestructorCallback_error(cl_context, void (_WRAPLIB_CALLBACK *)(cl_context, void *), void *) {
    return on_init_failed<cl_int >(15);
}
static cl_command_queue _WRAPLIB_API_CALL clCreateCommandQueueWithProperties_init(cl_context arg0, cl_device_id arg1, const cl_queue_properties *arg2, cl_int *arg3) {
    load_library();
    return clCreateCommandQueueWithProperties(arg0, arg1, arg2, arg3);
}
static cl_command_queue _WRAPLIB_API_CALL clCreateCommandQueueWithProperties_error(cl_context, cl_device_id, const cl_queue_properties *, cl_int *) {
    return on_init_failed<cl_command_queue >(16);
}
static cl_int _WRAPLIB_API_CALL clRetainCommandQueue_init(cl_command_queue arg0) {
    load_library();
    return clRetainCommandQueue(arg0);
}
static cl_int _WRAPLIB_API_CALL clRetainCommandQueue_error(cl_command_queue) {
    return on_init_failed<cl_int >(17);
}
static cl_int _WRAPLIB_API_CALL clReleaseCommandQueue_init(cl_command_queue arg0) {
    load_library();
    return clReleaseCommandQueue(arg0);
}
static cl_int _WRAPLIB_API_CALL clReleaseCommandQueue_error(cl_command_queue) {
    return on_init_failed<cl_int >(18);
}
static cl_int _WRAPLIB_API_CALL clGetCommandQueueInfo_init(cl_command_queue arg0, cl_command_queue_info arg1, size_t arg2, void *arg3, size_t *arg4) {
    load_library();
    return clGetCommandQueueInfo(arg0, arg1, arg2, arg3, arg4);
}
static cl_int _WRAPLIB_API_CALL clGetCommandQueueInfo_error(cl_command_queue, cl_command_queue_info, size_t, void *, size_t *) {
    return on_init_failed<cl_int >(19);
}
static cl_mem _WRAPLIB_API_CALL clCreateBuffer_init(cl_context arg0, cl_mem_flags arg1, size_t arg2, void *arg3, cl_int *arg4) {
    load_library();
    return clCreateBuffer(arg0, arg1, arg2, arg3, arg4);
}
static cl_mem _WRAPLIB_API_CALL clCreateBuffer_error(cl_context, cl_mem_flags, size_t, void *, cl_int *) {
    return on_init_failed<cl_mem >(20);
}
static cl_mem _WRAPLIB_API_CALL clCreateSubBuffer_init(cl_mem arg0, cl_mem_flags arg1, cl_buffer_create_type arg2, const void *arg3, cl_int *arg4) {
    load_library();
    return clCreateSubBuffer(arg0, arg1, arg2, arg3, arg4);
}
static cl_mem _WRAPLIB_API_CALL clCreateSubBuffer_error(cl_mem, cl_mem_flags, cl_buffer_create_type, const void *, cl_int *) {
    return on_init_failed<cl_mem >(21);
}
static cl_mem _WRAPLIB_API_CALL clCreateImage_init(cl_context arg0, cl_mem_flags arg1, const cl_image_format *arg2, const cl_image_desc *arg3, void *arg4, cl_int *arg5) {
    load_library();
    return clCreateImage(arg0, arg1, arg2, arg3, arg4, arg5);
}
static cl_mem _WRAPLIB_API_CALL clCreateImage_error(cl_context, cl_mem_flags, const cl_image_format *, const cl_image_desc *, void *, cl_int *) {
    return on_init_failed<cl_mem >(22);
}
static cl_mem _WRAPLIB_API_CALL clCreatePipe_init(cl_context arg0, cl_mem_flags arg1, cl_uint arg2, cl_uint arg3, const cl_pipe_properties *arg4, cl_int *arg5) {
    load_library();
    return clCreatePipe(arg0, arg1, arg2, arg3, arg4, arg5);
}
static cl_mem _WRAPLIB_API_CALL clCreatePipe_error(cl_context, cl_mem_flags, cl_uint, cl_uint, const cl_pipe_properties *, cl_int *) {
    return on_init_failed<cl_mem >(23);
}
static cl_mem _WRAPLIB_API_CALL clCreateBufferWithProperties_init(cl_context arg0, const cl_mem_properties *arg1, cl_mem_flags arg2, size_t arg3, void *arg4, cl_int *arg5) {
    load_library();
    return clCreateBufferWithProperties(arg0, arg1, arg2, arg3, arg4, arg5);
}
static cl_mem _WRAPLIB_API_CALL clCreateBufferWithProperties_error(cl_context, const cl_mem_properties *, cl_mem_flags, size_t, void *, cl_int *) {
    return on_init_failed<cl_mem >(24);
}
static cl_mem _WRAPLIB_API_CALL clCreateImageWithProperties_init(cl_context arg0, const cl_mem_properties *arg1, cl_mem_flags arg2, const cl_image_format *arg3, const cl_image_desc *arg4, void *arg5, cl_int *arg6) {
    load_library();
    return clCreateImageWithProperties(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
}
static cl_mem _WRAPLIB_API_CALL clCreateImageWithProperties_error(cl_context, const cl_mem_properties *, cl_mem_flags, const cl_image_format *, const cl_image_desc *, void *, cl_int *) {
    return on_init_failed<cl_mem >(25);
}
static cl_int _WRAPLIB_API_CALL clRetainMemObject_init(cl_mem arg0) {
    load_library();
    return clRetainMemObject(arg0);
}
static cl_int _WRAPLIB_API_CALL clRetainMemObject_error(cl_mem) {
    return on_init_failed<cl_int >(26);
}
static cl_int _WRAPLIB_API_CALL clReleaseMemObject_init(cl_mem arg0) {
    load_library();
    return clReleaseMemObject(arg0);
}
static cl_int _WRAPLIB_API_CALL clReleaseMemObject_error(cl_mem) {
    return on_init_failed<cl_int >(27);
}
static cl_int _WRAPLIB_API_CALL clGetSupportedImageFormats_init(cl_context arg0, cl_mem_flags arg1, cl_mem_object_type arg2, cl_uint arg3, cl_image_format *arg4, cl_uint *arg5) {
    load_library();
    return clGetSupportedImageFormats(arg0, arg1, arg2, arg3, arg4, arg5);
}
static cl_int _WRAPLIB_API_CALL clGetSupportedImageFormats_error(cl_context, cl_mem_flags, cl_mem_object_type, cl_uint, cl_image_format *, cl_uint *) {
    return on_init_failed<cl_int >(28);
}
static cl_int _WRAPLIB_API_CALL clGetMemObjectInfo_init(cl_mem arg0, cl_mem_info arg1, size_t arg2, void *arg3, size_t *arg4) {
    load_library();
    return clGetMemObjectInfo(arg0, arg1, arg2, arg3, arg4);
}
static cl_int _WRAPLIB_API_CALL clGetMemObjectInfo_error(cl_mem, cl_mem_info, size_t, void *, size_t *) {
    return on_init_failed<cl_int >(29);
}
static cl_int _WRAPLIB_API_CALL clGetImageInfo_init(cl_mem arg0, cl_image_info arg1, size_t arg2, void *arg3, size_t *arg4) {
    load_library();
    return clGetImageInfo(arg0, arg1, arg2, arg3, arg4);
}
static cl_int _WRAPLIB_API_CALL clGetImageInfo_error(cl_mem, cl_image_info, size_t, void *, size_t *) {
    return on_init_failed<cl_int >(30);
}
static cl_int _WRAPLIB_API_CALL clGetPipeInfo_init(cl_mem arg0, cl_pipe_info arg1, size_t arg2, void *arg3, size_t *arg4) {
    load_library();
    return clGetPipeInfo(arg0, arg1, arg2, arg3, arg4);
}
static cl_int _WRAPLIB_API_CALL clGetPipeInfo_error(cl_mem, cl_pipe_info, size_t, void *, size_t *) {
    return on_init_failed<cl_int >(31);
}
static cl_int _WRAPLIB_API_CALL clSetMemObjectDestructorCallback_init(cl_mem arg0, void (_WRAPLIB_CALLBACK *arg1)(cl_mem, void *), void *arg2) {
    load_library();
    return clSetMemObjectDestructorCallback(arg0, arg1, arg2);
}
static cl_int _WRAPLIB_API_CALL clSetMemObjectDestructorCallback_error(cl_mem, void (_WRAPLIB_CALLBACK *)(cl_mem, void *), void *) {
    return on_init_failed<cl_int >(32);
}
static void _WRAPLIB_API_CALL *clSVMAlloc_init(cl_context arg0, cl_svm_mem_flags arg1, size_t arg2, cl_uint arg3) {
    load_library();
    return clSVMAlloc(arg0, arg1, arg2, arg3);
}
static void _WRAPLIB_API_CALL *clSVMAlloc_error(cl_context, cl_svm_mem_flags, size_t, cl_uint) {
    return on_init_failed<void *>(33);
}
static void _WRAPLIB_API_CALL clSVMFree_init(cl_context arg0, void *arg1) {
    load_library();
    return clSVMFree(arg0, arg1);
}
static void _WRAPLIB_API_CALL clSVMFree_error(cl_context, void *) {
    return on_init_failed<void >(34);
}
static cl_sampler _WRAPLIB_API_CALL clCreateSamplerWithProperties_init(cl_context arg0, const cl_sampler_properties *arg1, cl_int *arg2) {
    load_library();
    return clCreateSamplerWithProperties(arg0, arg1, arg2);
}
static cl_sampler _WRAPLIB_API_CALL clCreateSamplerWithProperties_error(cl_context, const cl_sampler_properties *, cl_int *) {
    return on_init_failed<cl_sampler >(35);
}
static cl_int _WRAPLIB_API_CALL clRetainSampler_init(cl_sampler arg0) {
    load_library();
    return clRetainSampler(arg0);
}
static cl_int _WRAPLIB_API_CALL clRetainSampler_error(cl_sampler) {
    return on_init_failed<cl_int >(36);
}
static cl_int _WRAPLIB_API_CALL clReleaseSampler_init(cl_sampler arg0) {
    load_library();
    return clReleaseSampler(arg0);
}
static cl_int _WRAPLIB_API_CALL clReleaseSampler_error(cl_sampler) {
    return on_init_failed<cl_int >(37);
}
static cl_int _WRAPLIB_API_CALL clGetSamplerInfo_init(cl_sampler arg0, cl_sampler_info arg1, size_t arg2, void *arg3, size_t *arg4) {
    load_library();
    return clGetSamplerInfo(arg0, arg1, arg2, arg3, arg4);
}
static cl_int _WRAPLIB_API_CALL clGetSamplerInfo_error(cl_sampler, cl_sampler_info, size_t, void *, size_t *) {
    return on_init_failed<cl_int >(38);
}
static cl_program _WRAPLIB_API_CALL clCreateProgramWithSource_init(cl_context arg0, cl_uint arg1, const char **arg2, const size_t *arg3, cl_int *arg4) {
    load_library();
    return clCreateProgramWithSource(arg0, arg1, arg2, arg3, arg4);
}
static cl_program _WRAPLIB_API_CALL clCreateProgramWithSource_error(cl_context, cl_uint, const char **, const size_t *, cl_int *) {
    return on_init_failed<cl_program >(39);
}
static cl_program _WRAPLIB_API_CALL clCreateProgramWithBinary_init(cl_context arg0, cl_uint arg1, const cl_device_id *arg2, const size_t *arg3, const unsigned char **arg4, cl_int *arg5, cl_int *arg6) {
    load_library();
    return clCreateProgramWithBinary(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
}
static cl_program _WRAPLIB_API_CALL clCreateProgramWithBinary_error(cl_context, cl_uint, const cl_device_id *, const size_t *, const unsigned char **, cl_int *, cl_int *) {
    return on_init_failed<cl_program >(40);
}
static cl_program _WRAPLIB_API_CALL clCreateProgramWithBuiltInKernels_init(cl_context arg0, cl_uint arg1, const cl_device_id *arg2, const char *arg3, cl_int *arg4) {
    load_library();
    return clCreateProgramWithBuiltInKernels(arg0, arg1, arg2, arg3, arg4);
}
static cl_program _WRAPLIB_API_CALL clCreateProgramWithBuiltInKernels_error(cl_context, cl_uint, const cl_device_id *, const char *, cl_int *) {
    return on_init_failed<cl_program >(41);
}
static cl_program _WRAPLIB_API_CALL clCreateProgramWithIL_init(cl_context arg0, const void *arg1, size_t arg2, cl_int *arg3) {
    load_library();
    return clCreateProgramWithIL(arg0, arg1, arg2, arg3);
}
static cl_program _WRAPLIB_API_CALL clCreateProgramWithIL_error(cl_context, const void *, size_t, cl_int *) {
    return on_init_failed<cl_program >(42);
}
static cl_int _WRAPLIB_API_CALL clRetainProgram_init(cl_program arg0) {
    load_library();
    return clRetainProgram(arg0);
}
static cl_int _WRAPLIB_API_CALL clRetainProgram_error(cl_program) {
    return on_init_failed<cl_int >(43);
}
static cl_int _WRAPLIB_API_CALL clReleaseProgram_init(cl_program arg0) {
    load_library();
    return clReleaseProgram(arg0);
}
static cl_int _WRAPLIB_API_CALL clReleaseProgram_error(cl_program) {
    return on_init_failed<cl_int >(44);
}
static cl_int _WRAPLIB_API_CALL clBuildProgram_init(cl_program arg0, cl_uint arg1, const cl_device_id *arg2, const char *arg3, void (_WRAPLIB_CALLBACK *arg4)(cl_program, void *), void *arg5) {
    load_library();
    return clBuildProgram(arg0, arg1, arg2, arg3, arg4, arg5);
}
static cl_int _WRAPLIB_API_CALL clBuildProgram_error(cl_program, cl_uint, const cl_device_id *, const char *, void (_WRAPLIB_CALLBACK *)(cl_program, void *), void *) {
    return on_init_failed<cl_int >(45);
}
static cl_int _WRAPLIB_API_CALL clCompileProgram_init(cl_program arg0, cl_uint arg1, const cl_device_id *arg2, const char *arg3, cl_uint arg4, const cl_program *arg5, const char **arg6, void (_WRAPLIB_CALLBACK *arg7)(cl_program, void *), void *arg8) {
    load_library();
    return clCompileProgram(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}
static cl_int _WRAPLIB_API_CALL clCompileProgram_error(cl_program, cl_uint, const cl_device_id *, const char *, cl_uint, const cl_program *, const char **, void (_WRAPLIB_CALLBACK *)(cl_program, void *), void *) {
    return on_init_failed<cl_int >(46);
}
static cl_program _WRAPLIB_API_CALL clLinkProgram_init(cl_context arg0, cl_uint arg1, const cl_device_id *arg2, const char *arg3, cl_uint arg4, const cl_program *arg5, void (_WRAPLIB_CALLBACK *arg6)(cl_program, void *), void *arg7, cl_int *arg8) {
    load_library();
    return clLinkProgram(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}
static cl_program _WRAPLIB_API_CALL clLinkProgram_error(cl_context, cl_uint, const cl_device_id *, const char *, cl_uint, const cl_program *, void (_WRAPLIB_CALLBACK *)(cl_program, void *), void *, cl_int *) {
    return on_init_failed<cl_program >(47);
}
static cl_int _WRAPLIB_API_CALL clSetProgramReleaseCallback_init(cl_program arg0, void (_WRAPLIB_CALLBACK *arg1)(cl_program, void *), void *arg2) {
    load_library();
    return clSetProgramReleaseCallback(arg0, arg1, arg2);
}
static cl_int _WRAPLIB_API_CALL clSetProgramReleaseCallback_error(cl_program, void (_WRAPLIB_CALLBACK *)(cl_program, void *), void *) {
    return on_init_failed<cl_int >(48);
}
static cl_int _WRAPLIB_API_CALL clSetProgramSpecializationConstant_init(cl_program arg0, cl_uint arg1, size_t arg2, const void *arg3) {
    load_library();
    return clSetProgramSpecializationConstant(arg0, arg1, arg2, arg3);
}
static cl_int _WRAPLIB_API_CALL clSetProgramSpecializationConstant_error(cl_program, cl_uint, size_t, const void *) {
    return on_init_failed<cl_int >(49);
}
static cl_int _WRAPLIB_API_CALL clUnloadPlatformCompiler_init(cl_platform_id arg0) {
    load_library();
    return clUnloadPlatformCompiler(arg0);
}
static cl_int _WRAPLIB_API_CALL clUnloadPlatformCompiler_error(cl_platform_id) {
    return on_init_failed<cl_int >(50);
}
static cl_int _WRAPLIB_API_CALL clGetProgramInfo_init(cl_program arg0, cl_program_info arg1, size_t arg2, void *arg3, size_t *arg4) {
    load_library();
    return clGetProgramInfo(arg0, arg1, arg2, arg3, arg4);
}
static cl_int _WRAPLIB_API_CALL clGetProgramInfo_error(cl_program, cl_program_info, size_t, void *, size_t *) {
    return on_init_failed<cl_int >(51);
}
static cl_int _WRAPLIB_API_CALL clGetProgramBuildInfo_init(cl_program arg0, cl_device_id arg1, cl_program_build_info arg2, size_t arg3, void *arg4, size_t *arg5) {
    load_library();
    return clGetProgramBuildInfo(arg0, arg1, arg2, arg3, arg4, arg5);
}
static cl_int _WRAPLIB_API_CALL clGetProgramBuildInfo_error(cl_program, cl_device_id, cl_program_build_info, size_t, void *, size_t *) {
    return on_init_failed<cl_int >(52);
}
static cl_kernel _WRAPLIB_API_CALL clCreateKernel_init(cl_program arg0, const char *arg1, cl_int *arg2) {
    load_library();
    return clCreateKernel(arg0, arg1, arg2);
}
static cl_kernel _WRAPLIB_API_CALL clCreateKernel_error(cl_program, const char *, cl_int *) {
    return on_init_failed<cl_kernel >(53);
}
static cl_int _WRAPLIB_API_CALL clCreateKernelsInProgram_init(cl_program arg0, cl_uint arg1, cl_kernel *arg2, cl_uint *arg3) {
    load_library();
    return clCreateKernelsInProgram(arg0, arg1, arg2, arg3);
}
static cl_int _WRAPLIB_API_CALL clCreateKernelsInProgram_error(cl_program, cl_uint, cl_kernel *, cl_uint *) {
    return on_init_failed<cl_int >(54);
}
static cl_kernel _WRAPLIB_API_CALL clCloneKernel_init(cl_kernel arg0, cl_int *arg1) {
    load_library();
    return clCloneKernel(arg0, arg1);
}
static cl_kernel _WRAPLIB_API_CALL clCloneKernel_error(cl_kernel, cl_int *) {
    return on_init_failed<cl_kernel >(55);
}
static cl_int _WRAPLIB_API_CALL clRetainKernel_init(cl_kernel arg0) {
    load_library();
    return clRetainKernel(arg0);
}
static cl_int _WRAPLIB_API_CALL clRetainKernel_error(cl_kernel) {
    return on_init_failed<cl_int >(56);
}
static cl_int _WRAPLIB_API_CALL clReleaseKernel_init(cl_kernel arg0) {
    load_library();
    return clReleaseKernel(arg0);
}
static cl_int _WRAPLIB_API_CALL clReleaseKernel_error(cl_kernel) {
    return on_init_failed<cl_int >(57);
}
static cl_int _WRAPLIB_API_CALL clSetKernelArg_init(cl_kernel arg0, cl_uint arg1, size_t arg2, const void *arg3) {
    load_library();
    return clSetKernelArg(arg0, arg1, arg2, arg3);
}
static cl_int _WRAPLIB_API_CALL clSetKernelArg_error(cl_kernel, cl_uint, size_t, const void *) {
    return on_init_failed<cl_int >(58);
}
static cl_int _WRAPLIB_API_CALL clSetKernelArgSVMPointer_init(cl_kernel arg0, cl_uint arg1, const void *arg2) {
    load_library();
    return clSetKernelArgSVMPointer(arg0, arg1, arg2);
}
static cl_int _WRAPLIB_API_CALL clSetKernelArgSVMPointer_error(cl_kernel, cl_uint, const void *) {
    return on_init_failed<cl_int >(59);
}
static cl_int _WRAPLIB_API_CALL clSetKernelExecInfo_init(cl_kernel arg0, cl_kernel_exec_info arg1, size_t arg2, const void *arg3) {
    load_library();
    return clSetKernelExecInfo(arg0, arg1, arg2, arg3);
}
static cl_int _WRAPLIB_API_CALL clSetKernelExecInfo_error(cl_kernel, cl_kernel_exec_info, size_t, const void *) {
    return on_init_failed<cl_int >(60);
}
static cl_int _WRAPLIB_API_CALL clGetKernelInfo_init(cl_kernel arg0, cl_kernel_info arg1, size_t arg2, void *arg3, size_t *arg4) {
    load_library();
    return clGetKernelInfo(arg0, arg1, arg2, arg3, arg4);
}
static cl_int _WRAPLIB_API_CALL clGetKernelInfo_error(cl_kernel, cl_kernel_info, size_t, void *, size_t *) {
    return on_init_failed<cl_int >(61);
}
static cl_int _WRAPLIB_API_CALL clGetKernelArgInfo_init(cl_kernel arg0, cl_uint arg1, cl_kernel_arg_info arg2, size_t arg3, void *arg4, size_t *arg5) {
    load_library();
    return clGetKernelArgInfo(arg0, arg1, arg2, arg3, arg4, arg5);
}
static cl_int _WRAPLIB_API_CALL clGetKernelArgInfo_error(cl_kernel, cl_uint, cl_kernel_arg_info, size_t, void *, size_t *) {
    return on_init_failed<cl_int >(62);
}
static cl_int _WRAPLIB_API_CALL clGetKernelWorkGroupInfo_init(cl_kernel arg0, cl_device_id arg1, cl_kernel_work_group_info arg2, size_t arg3, void *arg4, size_t *arg5) {
    load_library();
    return clGetKernelWorkGroupInfo(arg0, arg1, arg2, arg3, arg4, arg5);
}
static cl_int _WRAPLIB_API_CALL clGetKernelWorkGroupInfo_error(cl_kernel, cl_device_id, cl_kernel_work_group_info, size_t, void *, size_t *) {
    return on_init_failed<cl_int >(63);
}
static cl_int _WRAPLIB_API_CALL clGetKernelSubGroupInfo_init(cl_kernel arg0, cl_device_id arg1, cl_kernel_sub_group_info arg2, size_t arg3, const void *arg4, size_t arg5, void *arg6, size_t *arg7) {
    load_library();
    return clGetKernelSubGroupInfo(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
}
static cl_int _WRAPLIB_API_CALL clGetKernelSubGroupInfo_error(cl_kernel, cl_device_id, cl_kernel_sub_group_info, size_t, const void *, size_t, void *, size_t *) {
    return on_init_failed<cl_int >(64);
}
static cl_int _WRAPLIB_API_CALL clWaitForEvents_init(cl_uint arg0, const cl_event *arg1) {
    load_library();
    return clWaitForEvents(arg0, arg1);
}
static cl_int _WRAPLIB_API_CALL clWaitForEvents_error(cl_uint, const cl_event *) {
    return on_init_failed<cl_int >(65);
}
static cl_int _WRAPLIB_API_CALL clGetEventInfo_init(cl_event arg0, cl_event_info arg1, size_t arg2, void *arg3, size_t *arg4) {
    load_library();
    return clGetEventInfo(arg0, arg1, arg2, arg3, arg4);
}
static cl_int _WRAPLIB_API_CALL clGetEventInfo_error(cl_event, cl_event_info, size_t, void *, size_t *) {
    return on_init_failed<cl_int >(66);
}
static cl_event _WRAPLIB_API_CALL clCreateUserEvent_init(cl_context arg0, cl_int *arg1) {
    load_library();
    return clCreateUserEvent(arg0, arg1);
}
static cl_event _WRAPLIB_API_CALL clCreateUserEvent_error(cl_context, cl_int *) {
    return on_init_failed<cl_event >(67);
}
static cl_int _WRAPLIB_API_CALL clRetainEvent_init(cl_event arg0) {
    load_library();
    return clRetainEvent(arg0);
}
static cl_int _WRAPLIB_API_CALL clRetainEvent_error(cl_event) {
    return on_init_failed<cl_int >(68);
}
static cl_int _WRAPLIB_API_CALL clReleaseEvent_init(cl_event arg0) {
    load_library();
    return clReleaseEvent(arg0);
}
static cl_int _WRAPLIB_API_CALL clReleaseEvent_error(cl_event) {
    return on_init_failed<cl_int >(69);
}
static cl_int _WRAPLIB_API_CALL clSetUserEventStatus_init(cl_event arg0, cl_int arg1) {
    load_library();
    return clSetUserEventStatus(arg0, arg1);
}
static cl_int _WRAPLIB_API_CALL clSetUserEventStatus_error(cl_event, cl_int) {
    return on_init_failed<cl_int >(70);
}
static cl_int _WRAPLIB_API_CALL clSetEventCallback_init(cl_event arg0, cl_int arg1, void (_WRAPLIB_CALLBACK *arg2)(cl_event, cl_int, void *), void *arg3) {
    load_library();
    return clSetEventCallback(arg0, arg1, arg2, arg3);
}
static cl_int _WRAPLIB_API_CALL clSetEventCallback_error(cl_event, cl_int, void (_WRAPLIB_CALLBACK *)(cl_event, cl_int, void *), void *) {
    return on_init_failed<cl_int >(71);
}
static cl_int _WRAPLIB_API_CALL clGetEventProfilingInfo_init(cl_event arg0, cl_profiling_info arg1, size_t arg2, void *arg3, size_t *arg4) {
    load_library();
    return clGetEventProfilingInfo(arg0, arg1, arg2, arg3, arg4);
}
static cl_int _WRAPLIB_API_CALL clGetEventProfilingInfo_error(cl_event, cl_profiling_info, size_t, void *, size_t *) {
    return on_init_failed<cl_int >(72);
}
static cl_int _WRAPLIB_API_CALL clFlush_init(cl_command_queue arg0) {
    load_library();
    return clFlush(arg0);
}
static cl_int _WRAPLIB_API_CALL clFlush_error(cl_command_queue) {
    return on_init_failed<cl_int >(73);
}
static cl_int _WRAPLIB_API_CALL clFinish_init(cl_command_queue arg0) {
    load_library();
    return clFinish(arg0);
}
static cl_int _WRAPLIB_API_CALL clFinish_error(cl_command_queue) {
    return on_init_failed<cl_int >(74);
}
static cl_int _WRAPLIB_API_CALL clEnqueueReadBuffer_init(cl_command_queue arg0, cl_mem arg1, cl_bool arg2, size_t arg3, size_t arg4, void *arg5, cl_uint arg6, const cl_event *arg7, cl_event *arg8) {
    load_library();
    return clEnqueueReadBuffer(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}
static cl_int _WRAPLIB_API_CALL clEnqueueReadBuffer_error(cl_command_queue, cl_mem, cl_bool, size_t, size_t, void *, cl_uint, const cl_event *, cl_event *) {
    return on_init_failed<cl_int >(75);
}
static cl_int _WRAPLIB_API_CALL clEnqueueReadBufferRect_init(cl_command_queue arg0, cl_mem arg1, cl_bool arg2, const size_t *arg3, const size_t *arg4, const size_t *arg5, size_t arg6, size_t arg7, size_t arg8, size_t arg9, void *arg10, cl_uint arg11, const cl_event *arg12, cl_event *arg13) {
    load_library();
    return clEnqueueReadBufferRect(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
}
static cl_int _WRAPLIB_API_CALL clEnqueueReadBufferRect_error(cl_command_queue, cl_mem, cl_bool, const size_t *, const size_t *, const size_t *, size_t, size_t, size_t, size_t, void *, cl_uint, const cl_event *, cl_event *) {
    return on_init_failed<cl_int >(76);
}
static cl_int _WRAPLIB_API_CALL clEnqueueWriteBuffer_init(cl_command_queue arg0, cl_mem arg1, cl_bool arg2, size_t arg3, size_t arg4, const void *arg5, cl_uint arg6, const cl_event *arg7, cl_event *arg8) {
    load_library();
    return clEnqueueWriteBuffer(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}
static cl_int _WRAPLIB_API_CALL clEnqueueWriteBuffer_error(cl_command_queue, cl_mem, cl_bool, size_t, size_t, const void *, cl_uint, const cl_event *, cl_event *) {
    return on_init_failed<cl_int >(77);
}
static cl_int _WRAPLIB_API_CALL clEnqueueWriteBufferRect_init(cl_command_queue arg0, cl_mem arg1, cl_bool arg2, const size_t *arg3, const size_t *arg4, const size_t *arg5, size_t arg6, size_t arg7, size_t arg8, size_t arg9, const void *arg10, cl_uint arg11, const cl_event *arg12, cl_event *arg13) {
    load_library();
    return clEnqueueWriteBufferRect(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
}
static cl_int _WRAPLIB_API_CALL clEnqueueWriteBufferRect_error(cl_command_queue, cl_mem, cl_bool, const size_t *, const size_t *, const size_t *, size_t, size_t, size_t, size_t, const void *, cl_uint, const cl_event *, cl_event *) {
    return on_init_failed<cl_int >(78);
}
static cl_int _WRAPLIB_API_CALL clEnqueueFillBuffer_init(cl_command_queue arg0, cl_mem arg1, const void *arg2, size_t arg3, size_t arg4, size_t arg5, cl_uint arg6, const cl_event *arg7, cl_event *arg8) {
    load_library();
    return clEnqueueFillBuffer(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}
static cl_int _WRAPLIB_API_CALL clEnqueueFillBuffer_error(cl_command_queue, cl_mem, const void *, size_t, size_t, size_t, cl_uint, const cl_event *, cl_event *) {
    return on_init_failed<cl_int >(79);
}
static cl_int _WRAPLIB_API_CALL clEnqueueCopyBuffer_init(cl_command_queue arg0, cl_mem arg1, cl_mem arg2, size_t arg3, size_t arg4, size_t arg5, cl_uint arg6, const cl_event *arg7, cl_event *arg8) {
    load_library();
    return clEnqueueCopyBuffer(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}
static cl_int _WRAPLIB_API_CALL clEnqueueCopyBuffer_error(cl_command_queue, cl_mem, cl_mem, size_t, size_t, size_t, cl_uint, const cl_event *, cl_event *) {
    return on_init_failed<cl_int >(80);
}
static cl_int _WRAPLIB_API_CALL clEnqueueCopyBufferRect_init(cl_command_queue arg0, cl_mem arg1, cl_mem arg2, const size_t *arg3, const size_t *arg4, const size_t *arg5, size_t arg6, size_t arg7, size_t arg8, size_t arg9, cl_uint arg10, const cl_event *arg11, cl_event *arg12) {
    load_library();
    return clEnqueueCopyBufferRect(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
}
static cl_int _WRAPLIB_API_CALL clEnqueueCopyBufferRect_error(cl_command_queue, cl_mem, cl_mem, const size_t *, const size_t *, const size_t *, size_t, size_t, size_t, size_t, cl_uint, const cl_event *, cl_event *) {
    return on_init_failed<cl_int >(81);
}
static cl_int _WRAPLIB_API_CALL clEnqueueReadImage_init(cl_command_queue arg0, cl_mem arg1, cl_bool arg2, const size_t *arg3, const size_t *arg4, size_t arg5, size_t arg6, void *arg7, cl_uint arg8, const cl_event *arg9, cl_event *arg10) {
    load_library();
    return clEnqueueReadImage(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
}
static cl_int _WRAPLIB_API_CALL clEnqueueReadImage_error(cl_command_queue, cl_mem, cl_bool, const size_t *, const size_t *, size_t, size_t, void *, cl_uint, const cl_event *, cl_event *) {
    return on_init_failed<cl_int >(82);
}
static cl_int _WRAPLIB_API_CALL clEnqueueWriteImage_init(cl_command_queue arg0, cl_mem arg1, cl_bool arg2, const size_t *arg3, const size_t *arg4, size_t arg5, size_t arg6, const void *arg7, cl_uint arg8, const cl_event *arg9, cl_event *arg10) {
    load_library();
    return clEnqueueWriteImage(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
}
static cl_int _WRAPLIB_API_CALL clEnqueueWriteImage_error(cl_command_queue, cl_mem, cl_bool, const size_t *, const size_t *, size_t, size_t, const void *, cl_uint, const cl_event *, cl_event *) {
    return on_init_failed<cl_int >(83);
}
static cl_int _WRAPLIB_API_CALL clEnqueueFillImage_init(cl_command_queue arg0, cl_mem arg1, const void *arg2, const size_t *arg3, const size_t *arg4, cl_uint arg5, const cl_event *arg6, cl_event *arg7) {
    load_library();
    return clEnqueueFillImage(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
}
static cl_int _WRAPLIB_API_CALL clEnqueueFillImage_error(cl_command_queue, cl_mem, const void *, const size_t *, const size_t *, cl_uint, const cl_event *, cl_event *) {
    return on_init_failed<cl_int >(84);
}
static cl_int _WRAPLIB_API_CALL clEnqueueCopyImage_init(cl_command_queue arg0, cl_mem arg1, cl_mem arg2, const size_t *arg3, const size_t *arg4, const size_t *arg5, cl_uint arg6, const cl_event *arg7, cl_event *arg8) {
    load_library();
    return clEnqueueCopyImage(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}
static cl_int _WRAPLIB_API_CALL clEnqueueCopyImage_error(cl_command_queue, cl_mem, cl_mem, const size_t *, const size_t *, const size_t *, cl_uint, const cl_event *, cl_event *) {
    return on_init_failed<cl_int >(85);
}
static cl_int _WRAPLIB_API_CALL clEnqueueCopyImageToBuffer_init(cl_command_queue arg0, cl_mem arg1, cl_mem arg2, const size_t *arg3, const size_t *arg4, size_t arg5, cl_uint arg6, const cl_event *arg7, cl_event *arg8) {
    load_library();
    return clEnqueueCopyImageToBuffer(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}
static cl_int _WRAPLIB_API_CALL clEnqueueCopyImageToBuffer_error(cl_command_queue, cl_mem, cl_mem, const size_t *, const size_t *, size_t, cl_uint, const cl_event *, cl_event *) {
    return on_init_failed<cl_int >(86);
}
static cl_int _WRAPLIB_API_CALL clEnqueueCopyBufferToImage_init(cl_command_queue arg0, cl_mem arg1, cl_mem arg2, size_t arg3, const size_t *arg4, const size_t *arg5, cl_uint arg6, const cl_event *arg7, cl_event *arg8) {
    load_library();
    return clEnqueueCopyBufferToImage(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}
static cl_int _WRAPLIB_API_CALL clEnqueueCopyBufferToImage_error(cl_command_queue, cl_mem, cl_mem, size_t, const size_t *, const size_t *, cl_uint, const cl_event *, cl_event *) {
    return on_init_failed<cl_int >(87);
}
static void _WRAPLIB_API_CALL *clEnqueueMapBuffer_init(cl_command_queue arg0, cl_mem arg1, cl_bool arg2, cl_map_flags arg3, size_t arg4, size_t arg5, cl_uint arg6, const cl_event *arg7, cl_event *arg8, cl_int *arg9) {
    load_library();
    return clEnqueueMapBuffer(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
}
static void _WRAPLIB_API_CALL *clEnqueueMapBuffer_error(cl_command_queue, cl_mem, cl_bool, cl_map_flags, size_t, size_t, cl_uint, const cl_event *, cl_event *, cl_int *) {
    return on_init_failed<void *>(88);
}
static void _WRAPLIB_API_CALL *clEnqueueMapImage_init(cl_command_queue arg0, cl_mem arg1, cl_bool arg2, cl_map_flags arg3, const size_t *arg4, const size_t *arg5, size_t *arg6, size_t *arg7, cl_uint arg8, const cl_event *arg9, cl_event *arg10, cl_int *arg11) {
    load_library();
    return clEnqueueMapImage(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
}
static void _WRAPLIB_API_CALL *clEnqueueMapImage_error(cl_command_queue, cl_mem, cl_bool, cl_map_flags, const size_t *, const size_t *, size_t *, size_t *, cl_uint, const cl_event *, cl_event *, cl_int *) {
    return on_init_failed<void *>(89);
}
static cl_int _WRAPLIB_API_CALL clEnqueueUnmapMemObject_init(cl_command_queue arg0, cl_mem arg1, void *arg2, cl_uint arg3, const cl_event *arg4, cl_event *arg5) {
    load_library();
    return clEnqueueUnmapMemObject(arg0, arg1, arg2, arg3, arg4, arg5);
}
static cl_int _WRAPLIB_API_CALL clEnqueueUnmapMemObject_error(cl_command_queue, cl_mem, void *, cl_uint, const cl_event *, cl_event *) {
    return on_init_failed<cl_int >(90);
}
static cl_int _WRAPLIB_API_CALL clEnqueueMigrateMemObjects_init(cl_command_queue arg0, cl_uint arg1, const cl_mem *arg2, cl_mem_migration_flags arg3, cl_uint arg4, const cl_event *arg5, cl_event *arg6) {
    load_library();
    return clEnqueueMigrateMemObjects(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
}
static cl_int _WRAPLIB_API_CALL clEnqueueMigrateMemObjects_error(cl_command_queue, cl_uint, const cl_mem *, cl_mem_migration_flags, cl_uint, const cl_event *, cl_event *) {
    return on_init_failed<cl_int >(91);
}
static cl_int _WRAPLIB_API_CALL clEnqueueNDRangeKernel_init(cl_command_queue arg0, cl_kernel arg1, cl_uint arg2, const size_t *arg3, const size_t *arg4, const size_t *arg5, cl_uint arg6, const cl_event *arg7, cl_event *arg8) {
    load_library();
    return clEnqueueNDRangeKernel(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}
static cl_int _WRAPLIB_API_CALL clEnqueueNDRangeKernel_error(cl_command_queue, cl_kernel, cl_uint, const size_t *, const size_t *, const size_t *, cl_uint, const cl_event *, cl_event *) {
    return on_init_failed<cl_int >(92);
}
static cl_int _WRAPLIB_API_CALL clEnqueueNativeKernel_init(cl_command_queue arg0, void (_WRAPLIB_CALLBACK *arg1)(void *), void *arg2, size_t arg3, cl_uint arg4, const cl_mem *arg5, const void **arg6, cl_uint arg7, const cl_event *arg8, cl_event *arg9) {
    load_library();
    return clEnqueueNativeKernel(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
}
static cl_int _WRAPLIB_API_CALL clEnqueueNativeKernel_error(cl_command_queue, void (_WRAPLIB_CALLBACK *)(void *), void *, size_t, cl_uint, const cl_mem *, const void **, cl_uint, const cl_event *, cl_event *) {
    return on_init_failed<cl_int >(93);
}
static cl_int _WRAPLIB_API_CALL clEnqueueMarkerWithWaitList_init(cl_command_queue arg0, cl_uint arg1, const cl_event *arg2, cl_event *arg3) {
    load_library();
    return clEnqueueMarkerWithWaitList(arg0, arg1, arg2, arg3);
}
static cl_int _WRAPLIB_API_CALL clEnqueueMarkerWithWaitList_error(cl_command_queue, cl_uint, const cl_event *, cl_event *) {
    return on_init_failed<cl_int >(94);
}
static cl_int _WRAPLIB_API_CALL clEnqueueBarrierWithWaitList_init(cl_command_queue arg0, cl_uint arg1, const cl_event *arg2, cl_event *arg3) {
    load_library();
    return clEnqueueBarrierWithWaitList(arg0, arg1, arg2, arg3);
}
static cl_int _WRAPLIB_API_CALL clEnqueueBarrierWithWaitList_error(cl_command_queue, cl_uint, const cl_event *, cl_event *) {
    return on_init_failed<cl_int >(95);
}
static cl_int _WRAPLIB_API_CALL clEnqueueSVMFree_init(cl_command_queue arg0, cl_uint arg1, void *arg2[], void (_WRAPLIB_CALLBACK *arg3)(cl_command_queue, cl_uint, void *[], void *), void *arg4, cl_uint arg5, const cl_event *arg6, cl_event *arg7) {
    load_library();
    return clEnqueueSVMFree(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
}
static cl_int _WRAPLIB_API_CALL clEnqueueSVMFree_error(cl_command_queue, cl_uint, void *[], void (_WRAPLIB_CALLBACK *)(cl_command_queue, cl_uint, void *[], void *), void *, cl_uint, const cl_event *, cl_event *) {
    return on_init_failed<cl_int >(96);
}
static cl_int _WRAPLIB_API_CALL clEnqueueSVMMemcpy_init(cl_command_queue arg0, cl_bool arg1, void *arg2, const void *arg3, size_t arg4, cl_uint arg5, const cl_event *arg6, cl_event *arg7) {
    load_library();
    return clEnqueueSVMMemcpy(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
}
static cl_int _WRAPLIB_API_CALL clEnqueueSVMMemcpy_error(cl_command_queue, cl_bool, void *, const void *, size_t, cl_uint, const cl_event *, cl_event *) {
    return on_init_failed<cl_int >(97);
}
static cl_int _WRAPLIB_API_CALL clEnqueueSVMMemFill_init(cl_command_queue arg0, void *arg1, const void *arg2, size_t arg3, size_t arg4, cl_uint arg5, const cl_event *arg6, cl_event *arg7) {
    load_library();
    return clEnqueueSVMMemFill(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
}
static cl_int _WRAPLIB_API_CALL clEnqueueSVMMemFill_error(cl_command_queue, void *, const void *, size_t, size_t, cl_uint, const cl_event *, cl_event *) {
    return on_init_failed<cl_int >(98);
}
static cl_int _WRAPLIB_API_CALL clEnqueueSVMMap_init(cl_command_queue arg0, cl_bool arg1, cl_map_flags arg2, void *arg3, size_t arg4, cl_uint arg5, const cl_event *arg6, cl_event *arg7) {
    load_library();
    return clEnqueueSVMMap(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
}
static cl_int _WRAPLIB_API_CALL clEnqueueSVMMap_error(cl_command_queue, cl_bool, cl_map_flags, void *, size_t, cl_uint, const cl_event *, cl_event *) {
    return on_init_failed<cl_int >(99);
}
static cl_int _WRAPLIB_API_CALL clEnqueueSVMUnmap_init(cl_command_queue arg0, void *arg1, cl_uint arg2, const cl_event *arg3, cl_event *arg4) {
    load_library();
    return clEnqueueSVMUnmap(arg0, arg1, arg2, arg3, arg4);
}
static cl_int _WRAPLIB_API_CALL clEnqueueSVMUnmap_error(cl_command_queue, void *, cl_uint, const cl_event *, cl_event *) {
    return on_init_failed<cl_int >(100);
}
static cl_int _WRAPLIB_API_CALL clEnqueueSVMMigrateMem_init(cl_command_queue arg0, cl_uint arg1, const void **arg2, const size_t *arg3, cl_mem_migration_flags arg4, cl_uint arg5, const cl_event *arg6, cl_event *arg7) {
    load_library();
    return clEnqueueSVMMigrateMem(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
}
static cl_int _WRAPLIB_API_CALL clEnqueueSVMMigrateMem_error(cl_command_queue, cl_uint, const void **, const size_t *, cl_mem_migration_flags, cl_uint, const cl_event *, cl_event *) {
    return on_init_failed<cl_int >(101);
}
static void _WRAPLIB_API_CALL *clGetExtensionFunctionAddressForPlatform_init(cl_platform_id arg0, const char *arg1) {
    load_library();
    return clGetExtensionFunctionAddressForPlatform(arg0, arg1);
}
static void _WRAPLIB_API_CALL *clGetExtensionFunctionAddressForPlatform_error(cl_platform_id, const char *) {
    return on_init_failed<void *>(102);
}
static cl_mem _WRAPLIB_API_CALL clCreateImage2D_init(cl_context arg0, cl_mem_flags arg1, const cl_image_format *arg2, size_t arg3, size_t arg4, size_t arg5, void *arg6, cl_int *arg7) {
    load_library();
    return clCreateImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
}
static cl_mem _WRAPLIB_API_CALL clCreateImage2D_error(cl_context, cl_mem_flags, const cl_image_format *, size_t, size_t, size_t, void *, cl_int *) {
    return on_init_failed<cl_mem >(103);
}
static cl_mem _WRAPLIB_API_CALL clCreateImage3D_init(cl_context arg0, cl_mem_flags arg1, const cl_image_format *arg2, size_t arg3, size_t arg4, size_t arg5, size_t arg6, size_t arg7, void *arg8, cl_int *arg9) {
    load_library();
    return clCreateImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
}
static cl_mem _WRAPLIB_API_CALL clCreateImage3D_error(cl_context, cl_mem_flags, const cl_image_format *, size_t, size_t, size_t, size_t, size_t, void *, cl_int *) {
    return on_init_failed<cl_mem >(104);
}
static cl_int _WRAPLIB_API_CALL clEnqueueMarker_init(cl_command_queue arg0, cl_event *arg1) {
    load_library();
    return clEnqueueMarker(arg0, arg1);
}
static cl_int _WRAPLIB_API_CALL clEnqueueMarker_error(cl_command_queue, cl_event *) {
    return on_init_failed<cl_int >(105);
}
static cl_int _WRAPLIB_API_CALL clEnqueueWaitForEvents_init(cl_command_queue arg0, cl_uint arg1, const cl_event *arg2) {
    load_library();
    return clEnqueueWaitForEvents(arg0, arg1, arg2);
}
static cl_int _WRAPLIB_API_CALL clEnqueueWaitForEvents_error(cl_command_queue, cl_uint, const cl_event *) {
    return on_init_failed<cl_int >(106);
}
static cl_int _WRAPLIB_API_CALL clEnqueueBarrier_init(cl_command_queue arg0) {
    load_library();
    return clEnqueueBarrier(arg0);
}
static cl_int _WRAPLIB_API_CALL clEnqueueBarrier_error(cl_command_queue) {
    return on_init_failed<cl_int >(107);
}
static cl_int _WRAPLIB_API_CALL clUnloadCompiler_init() {
    load_library();
    return clUnloadCompiler();
}
static cl_int _WRAPLIB_API_CALL clUnloadCompiler_error() {
    return on_init_failed<cl_int >(108);
}
static void _WRAPLIB_API_CALL *clGetExtensionFunctionAddress_init(const char *arg0) {
    load_library();
    return clGetExtensionFunctionAddress(arg0);
}
static void _WRAPLIB_API_CALL *clGetExtensionFunctionAddress_error(const char *) {
    return on_init_failed<void *>(109);
}
static cl_command_queue _WRAPLIB_API_CALL clCreateCommandQueue_init(cl_context arg0, cl_device_id arg1, cl_command_queue_properties arg2, cl_int *arg3) {
    load_library();
    return clCreateCommandQueue(arg0, arg1, arg2, arg3);
}
static cl_command_queue _WRAPLIB_API_CALL clCreateCommandQueue_error(cl_context, cl_device_id, cl_command_queue_properties, cl_int *) {
    return on_init_failed<cl_command_queue >(110);
}
static cl_sampler _WRAPLIB_API_CALL clCreateSampler_init(cl_context arg0, cl_bool arg1, cl_addressing_mode arg2, cl_filter_mode arg3, cl_int *arg4) {
    load_library();
    return clCreateSampler(arg0, arg1, arg2, arg3, arg4);
}
static cl_sampler _WRAPLIB_API_CALL clCreateSampler_error(cl_context, cl_bool, cl_addressing_mode, cl_filter_mode, cl_int *) {
    return on_init_failed<cl_sampler >(111);
}
static cl_int _WRAPLIB_API_CALL clEnqueueTask_init(cl_command_queue arg0, cl_kernel arg1, cl_uint arg2, const cl_event *arg3, cl_event *arg4) {
    load_library();
    return clEnqueueTask(arg0, arg1, arg2, arg3, arg4);
}
static cl_int _WRAPLIB_API_CALL clEnqueueTask_error(cl_command_queue, cl_kernel, cl_uint, const cl_event *, cl_event *) {
    return on_init_failed<cl_int >(112);
}
static constexpr size_t NR_FUNC = 113;
static void* g_func_table[NR_FUNC] = {(void*)(&clGetPlatformIDs_init),
    (void*)(&clGetPlatformInfo_init),
    (void*)(&clGetDeviceIDs_init),
    (void*)(&clGetDeviceInfo_init),
    (void*)(&clCreateSubDevices_init),
    (void*)(&clRetainDevice_init),
    (void*)(&clReleaseDevice_init),
    (void*)(&clSetDefaultDeviceCommandQueue_init),
    (void*)(&clGetDeviceAndHostTimer_init),
    (void*)(&clGetHostTimer_init),
    (void*)(&clCreateContext_init),
    (void*)(&clCreateContextFromType_init),
    (void*)(&clRetainContext_init),
    (void*)(&clReleaseContext_init),
    (void*)(&clGetContextInfo_init),
    (void*)(&clSetContextDestructorCallback_init),
    (void*)(&clCreateCommandQueueWithProperties_init),
    (void*)(&clRetainCommandQueue_init),
    (void*)(&clReleaseCommandQueue_init),
    (void*)(&clGetCommandQueueInfo_init),
    (void*)(&clCreateBuffer_init),
    (void*)(&clCreateSubBuffer_init),
    (void*)(&clCreateImage_init),
    (void*)(&clCreatePipe_init),
    (void*)(&clCreateBufferWithProperties_init),
    (void*)(&clCreateImageWithProperties_init),
    (void*)(&clRetainMemObject_init),
    (void*)(&clReleaseMemObject_init),
    (void*)(&clGetSupportedImageFormats_init),
    (void*)(&clGetMemObjectInfo_init),
    (void*)(&clGetImageInfo_init),
    (void*)(&clGetPipeInfo_init),
    (void*)(&clSetMemObjectDestructorCallback_init),
    (void*)(&clSVMAlloc_init),
    (void*)(&clSVMFree_init),
    (void*)(&clCreateSamplerWithProperties_init),
    (void*)(&clRetainSampler_init),
    (void*)(&clReleaseSampler_init),
    (void*)(&clGetSamplerInfo_init),
    (void*)(&clCreateProgramWithSource_init),
    (void*)(&clCreateProgramWithBinary_init),
    (void*)(&clCreateProgramWithBuiltInKernels_init),
    (void*)(&clCreateProgramWithIL_init),
    (void*)(&clRetainProgram_init),
    (void*)(&clReleaseProgram_init),
    (void*)(&clBuildProgram_init),
    (void*)(&clCompileProgram_init),
    (void*)(&clLinkProgram_init),
    (void*)(&clSetProgramReleaseCallback_init),
    (void*)(&clSetProgramSpecializationConstant_init),
    (void*)(&clUnloadPlatformCompiler_init),
    (void*)(&clGetProgramInfo_init),
    (void*)(&clGetProgramBuildInfo_init),
    (void*)(&clCreateKernel_init),
    (void*)(&clCreateKernelsInProgram_init),
    (void*)(&clCloneKernel_init),
    (void*)(&clRetainKernel_init),
    (void*)(&clReleaseKernel_init),
    (void*)(&clSetKernelArg_init),
    (void*)(&clSetKernelArgSVMPointer_init),
    (void*)(&clSetKernelExecInfo_init),
    (void*)(&clGetKernelInfo_init),
    (void*)(&clGetKernelArgInfo_init),
    (void*)(&clGetKernelWorkGroupInfo_init),
    (void*)(&clGetKernelSubGroupInfo_init),
    (void*)(&clWaitForEvents_init),
    (void*)(&clGetEventInfo_init),
    (void*)(&clCreateUserEvent_init),
    (void*)(&clRetainEvent_init),
    (void*)(&clReleaseEvent_init),
    (void*)(&clSetUserEventStatus_init),
    (void*)(&clSetEventCallback_init),
    (void*)(&clGetEventProfilingInfo_init),
    (void*)(&clFlush_init),
    (void*)(&clFinish_init),
    (void*)(&clEnqueueReadBuffer_init),
    (void*)(&clEnqueueReadBufferRect_init),
    (void*)(&clEnqueueWriteBuffer_init),
    (void*)(&clEnqueueWriteBufferRect_init),
    (void*)(&clEnqueueFillBuffer_init),
    (void*)(&clEnqueueCopyBuffer_init),
    (void*)(&clEnqueueCopyBufferRect_init),
    (void*)(&clEnqueueReadImage_init),
    (void*)(&clEnqueueWriteImage_init),
    (void*)(&clEnqueueFillImage_init),
    (void*)(&clEnqueueCopyImage_init),
    (void*)(&clEnqueueCopyImageToBuffer_init),
    (void*)(&clEnqueueCopyBufferToImage_init),
    (void*)(&clEnqueueMapBuffer_init),
    (void*)(&clEnqueueMapImage_init),
    (void*)(&clEnqueueUnmapMemObject_init),
    (void*)(&clEnqueueMigrateMemObjects_init),
    (void*)(&clEnqueueNDRangeKernel_init),
    (void*)(&clEnqueueNativeKernel_init),
    (void*)(&clEnqueueMarkerWithWaitList_init),
    (void*)(&clEnqueueBarrierWithWaitList_init),
    (void*)(&clEnqueueSVMFree_init),
    (void*)(&clEnqueueSVMMemcpy_init),
    (void*)(&clEnqueueSVMMemFill_init),
    (void*)(&clEnqueueSVMMap_init),
    (void*)(&clEnqueueSVMUnmap_init),
    (void*)(&clEnqueueSVMMigrateMem_init),
    (void*)(&clGetExtensionFunctionAddressForPlatform_init),
    (void*)(&clCreateImage2D_init),
    (void*)(&clCreateImage3D_init),
    (void*)(&clEnqueueMarker_init),
    (void*)(&clEnqueueWaitForEvents_init),
    (void*)(&clEnqueueBarrier_init),
    (void*)(&clUnloadCompiler_init),
    (void*)(&clGetExtensionFunctionAddress_init),
    (void*)(&clCreateCommandQueue_init),
    (void*)(&clCreateSampler_init),
    (void*)(&clEnqueueTask_init)};
static void* g_func_table_error[NR_FUNC] = {(void*)(&clGetPlatformIDs_error),
    (void*)(&clGetPlatformInfo_error),
    (void*)(&clGetDeviceIDs_error),
    (void*)(&clGetDeviceInfo_error),
    (void*)(&clCreateSubDevices_error),
    (void*)(&clRetainDevice_error),
    (void*)(&clReleaseDevice_error),
    (void*)(&clSetDefaultDeviceCommandQueue_error),
    (void*)(&clGetDeviceAndHostTimer_error),
    (void*)(&clGetHostTimer_error),
    (void*)(&clCreateContext_error),
    (void*)(&clCreateContextFromType_error),
    (void*)(&clRetainContext_error),
    (void*)(&clReleaseContext_error),
    (void*)(&clGetContextInfo_error),
    (void*)(&clSetContextDestructorCallback_error),
    (void*)(&clCreateCommandQueueWithProperties_error),
    (void*)(&clRetainCommandQueue_error),
    (void*)(&clReleaseCommandQueue_error),
    (void*)(&clGetCommandQueueInfo_error),
    (void*)(&clCreateBuffer_error),
    (void*)(&clCreateSubBuffer_error),
    (void*)(&clCreateImage_error),
    (void*)(&clCreatePipe_error),
    (void*)(&clCreateBufferWithProperties_error),
    (void*)(&clCreateImageWithProperties_error),
    (void*)(&clRetainMemObject_error),
    (void*)(&clReleaseMemObject_error),
    (void*)(&clGetSupportedImageFormats_error),
    (void*)(&clGetMemObjectInfo_error),
    (void*)(&clGetImageInfo_error),
    (void*)(&clGetPipeInfo_error),
    (void*)(&clSetMemObjectDestructorCallback_error),
    (void*)(&clSVMAlloc_error),
    (void*)(&clSVMFree_error),
    (void*)(&clCreateSamplerWithProperties_error),
    (void*)(&clRetainSampler_error),
    (void*)(&clReleaseSampler_error),
    (void*)(&clGetSamplerInfo_error),
    (void*)(&clCreateProgramWithSource_error),
    (void*)(&clCreateProgramWithBinary_error),
    (void*)(&clCreateProgramWithBuiltInKernels_error),
    (void*)(&clCreateProgramWithIL_error),
    (void*)(&clRetainProgram_error),
    (void*)(&clReleaseProgram_error),
    (void*)(&clBuildProgram_error),
    (void*)(&clCompileProgram_error),
    (void*)(&clLinkProgram_error),
    (void*)(&clSetProgramReleaseCallback_error),
    (void*)(&clSetProgramSpecializationConstant_error),
    (void*)(&clUnloadPlatformCompiler_error),
    (void*)(&clGetProgramInfo_error),
    (void*)(&clGetProgramBuildInfo_error),
    (void*)(&clCreateKernel_error),
    (void*)(&clCreateKernelsInProgram_error),
    (void*)(&clCloneKernel_error),
    (void*)(&clRetainKernel_error),
    (void*)(&clReleaseKernel_error),
    (void*)(&clSetKernelArg_error),
    (void*)(&clSetKernelArgSVMPointer_error),
    (void*)(&clSetKernelExecInfo_error),
    (void*)(&clGetKernelInfo_error),
    (void*)(&clGetKernelArgInfo_error),
    (void*)(&clGetKernelWorkGroupInfo_error),
    (void*)(&clGetKernelSubGroupInfo_error),
    (void*)(&clWaitForEvents_error),
    (void*)(&clGetEventInfo_error),
    (void*)(&clCreateUserEvent_error),
    (void*)(&clRetainEvent_error),
    (void*)(&clReleaseEvent_error),
    (void*)(&clSetUserEventStatus_error),
    (void*)(&clSetEventCallback_error),
    (void*)(&clGetEventProfilingInfo_error),
    (void*)(&clFlush_error),
    (void*)(&clFinish_error),
    (void*)(&clEnqueueReadBuffer_error),
    (void*)(&clEnqueueReadBufferRect_error),
    (void*)(&clEnqueueWriteBuffer_error),
    (void*)(&clEnqueueWriteBufferRect_error),
    (void*)(&clEnqueueFillBuffer_error),
    (void*)(&clEnqueueCopyBuffer_error),
    (void*)(&clEnqueueCopyBufferRect_error),
    (void*)(&clEnqueueReadImage_error),
    (void*)(&clEnqueueWriteImage_error),
    (void*)(&clEnqueueFillImage_error),
    (void*)(&clEnqueueCopyImage_error),
    (void*)(&clEnqueueCopyImageToBuffer_error),
    (void*)(&clEnqueueCopyBufferToImage_error),
    (void*)(&clEnqueueMapBuffer_error),
    (void*)(&clEnqueueMapImage_error),
    (void*)(&clEnqueueUnmapMemObject_error),
    (void*)(&clEnqueueMigrateMemObjects_error),
    (void*)(&clEnqueueNDRangeKernel_error),
    (void*)(&clEnqueueNativeKernel_error),
    (void*)(&clEnqueueMarkerWithWaitList_error),
    (void*)(&clEnqueueBarrierWithWaitList_error),
    (void*)(&clEnqueueSVMFree_error),
    (void*)(&clEnqueueSVMMemcpy_error),
    (void*)(&clEnqueueSVMMemFill_error),
    (void*)(&clEnqueueSVMMap_error),
    (void*)(&clEnqueueSVMUnmap_error),
    (void*)(&clEnqueueSVMMigrateMem_error),
    (void*)(&clGetExtensionFunctionAddressForPlatform_error),
    (void*)(&clCreateImage2D_error),
    (void*)(&clCreateImage3D_error),
    (void*)(&clEnqueueMarker_error),
    (void*)(&clEnqueueWaitForEvents_error),
    (void*)(&clEnqueueBarrier_error),
    (void*)(&clUnloadCompiler_error),
    (void*)(&clGetExtensionFunctionAddress_error),
    (void*)(&clCreateCommandQueue_error),
    (void*)(&clCreateSampler_error),
    (void*)(&clEnqueueTask_error)};
static const char* const g_func_name[NR_FUNC] = {"clGetPlatformIDs",
    "clGetPlatformInfo",
    "clGetDeviceIDs",
    "clGetDeviceInfo",
    "clCreateSubDevices",
    "clRetainDevice",
    "clReleaseDevice",
    "clSetDefaultDeviceCommandQueue",
    "clGetDeviceAndHostTimer",
    "clGetHostTimer",
    "clCreateContext",
    "clCreateContextFromType",
    "clRetainContext",
    "clReleaseContext",
    "clGetContextInfo",
    "clSetContextDestructorCallback",
    "clCreateCommandQueueWithProperties",
    "clRetainCommandQueue",
    "clReleaseCommandQueue",
    "clGetCommandQueueInfo",
    "clCreateBuffer",
    "clCreateSubBuffer",
    "clCreateImage",
    "clCreatePipe",
    "clCreateBufferWithProperties",
    "clCreateImageWithProperties",
    "clRetainMemObject",
    "clReleaseMemObject",
    "clGetSupportedImageFormats",
    "clGetMemObjectInfo",
    "clGetImageInfo",
    "clGetPipeInfo",
    "clSetMemObjectDestructorCallback",
    "clSVMAlloc",
    "clSVMFree",
    "clCreateSamplerWithProperties",
    "clRetainSampler",
    "clReleaseSampler",
    "clGetSamplerInfo",
    "clCreateProgramWithSource",
    "clCreateProgramWithBinary",
    "clCreateProgramWithBuiltInKernels",
    "clCreateProgramWithIL",
    "clRetainProgram",
    "clReleaseProgram",
    "clBuildProgram",
    "clCompileProgram",
    "clLinkProgram",
    "clSetProgramReleaseCallback",
    "clSetProgramSpecializationConstant",
    "clUnloadPlatformCompiler",
    "clGetProgramInfo",
    "clGetProgramBuildInfo",
    "clCreateKernel",
    "clCreateKernelsInProgram",
    "clCloneKernel",
    "clRetainKernel",
    "clReleaseKernel",
    "clSetKernelArg",
    "clSetKernelArgSVMPointer",
    "clSetKernelExecInfo",
    "clGetKernelInfo",
    "clGetKernelArgInfo",
    "clGetKernelWorkGroupInfo",
    "clGetKernelSubGroupInfo",
    "clWaitForEvents",
    "clGetEventInfo",
    "clCreateUserEvent",
    "clRetainEvent",
    "clReleaseEvent",
    "clSetUserEventStatus",
    "clSetEventCallback",
    "clGetEventProfilingInfo",
    "clFlush",
    "clFinish",
    "clEnqueueReadBuffer",
    "clEnqueueReadBufferRect",
    "clEnqueueWriteBuffer",
    "clEnqueueWriteBufferRect",
    "clEnqueueFillBuffer",
    "clEnqueueCopyBuffer",
    "clEnqueueCopyBufferRect",
    "clEnqueueReadImage",
    "clEnqueueWriteImage",
    "clEnqueueFillImage",
    "clEnqueueCopyImage",
    "clEnqueueCopyImageToBuffer",
    "clEnqueueCopyBufferToImage",
    "clEnqueueMapBuffer",
    "clEnqueueMapImage",
    "clEnqueueUnmapMemObject",
    "clEnqueueMigrateMemObjects",
    "clEnqueueNDRangeKernel",
    "clEnqueueNativeKernel",
    "clEnqueueMarkerWithWaitList",
    "clEnqueueBarrierWithWaitList",
    "clEnqueueSVMFree",
    "clEnqueueSVMMemcpy",
    "clEnqueueSVMMemFill",
    "clEnqueueSVMMap",
    "clEnqueueSVMUnmap",
    "clEnqueueSVMMigrateMem",
    "clGetExtensionFunctionAddressForPlatform",
    "clCreateImage2D",
    "clCreateImage3D",
    "clEnqueueMarker",
    "clEnqueueWaitForEvents",
    "clEnqueueBarrier",
    "clUnloadCompiler",
    "clGetExtensionFunctionAddress",
    "clCreateCommandQueue",
    "clCreateSampler",
    "clEnqueueTask"};

static void load_library() {
    static bool done = false;
    static std::mutex mtx;
    std::lock_guard<std::mutex> lg{mtx};

    if (done)
        return;

    void* handle = get_library_handle();
    for (size_t i = 0; i < NR_FUNC; ++i) {
        void* func;
        if (!handle) {
            func = nullptr;
        } else {
            func = resolve_library_func(handle, g_func_name[i]);
        }
        if (!func) {
            func = g_func_table_error[i];
        }
        __atomic_store_n(g_func_table + i, func, __ATOMIC_RELAXED);
    }
    done = true;
}

cl_int _WRAPLIB_API_CALL clGetPlatformIDs(cl_uint arg0, cl_platform_id *arg1, cl_uint *arg2) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_uint, cl_platform_id *, cl_uint *);
    ON_ENTRY(clGetPlatformIDs);
    f_ptr_t f = (f_ptr_t)(g_func_table[0]);
    return f(arg0, arg1, arg2);
}
cl_int _WRAPLIB_API_CALL clGetPlatformInfo(cl_platform_id arg0, cl_platform_info arg1, size_t arg2, void *arg3, size_t *arg4) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_platform_id, cl_platform_info, size_t, void *, size_t *);
    ON_ENTRY(clGetPlatformInfo);
    f_ptr_t f = (f_ptr_t)(g_func_table[1]);
    return f(arg0, arg1, arg2, arg3, arg4);
}
cl_int _WRAPLIB_API_CALL clGetDeviceIDs(cl_platform_id arg0, cl_device_type arg1, cl_uint arg2, cl_device_id *arg3, cl_uint *arg4) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_platform_id, cl_device_type, cl_uint, cl_device_id *, cl_uint *);
    ON_ENTRY(clGetDeviceIDs);
    f_ptr_t f = (f_ptr_t)(g_func_table[2]);
    return f(arg0, arg1, arg2, arg3, arg4);
}
cl_int _WRAPLIB_API_CALL clGetDeviceInfo(cl_device_id arg0, cl_device_info arg1, size_t arg2, void *arg3, size_t *arg4) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_device_id, cl_device_info, size_t, void *, size_t *);
    ON_ENTRY(clGetDeviceInfo);
    f_ptr_t f = (f_ptr_t)(g_func_table[3]);
    return f(arg0, arg1, arg2, arg3, arg4);
}
cl_int _WRAPLIB_API_CALL clCreateSubDevices(cl_device_id arg0, const cl_device_partition_property *arg1, cl_uint arg2, cl_device_id *arg3, cl_uint *arg4) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_device_id, const cl_device_partition_property *, cl_uint, cl_device_id *, cl_uint *);
    ON_ENTRY(clCreateSubDevices);
    f_ptr_t f = (f_ptr_t)(g_func_table[4]);
    return f(arg0, arg1, arg2, arg3, arg4);
}
cl_int _WRAPLIB_API_CALL clRetainDevice(cl_device_id arg0) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_device_id);
    ON_ENTRY(clRetainDevice);
    f_ptr_t f = (f_ptr_t)(g_func_table[5]);
    return f(arg0);
}
cl_int _WRAPLIB_API_CALL clReleaseDevice(cl_device_id arg0) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_device_id);
    ON_ENTRY(clReleaseDevice);
    f_ptr_t f = (f_ptr_t)(g_func_table[6]);
    return f(arg0);
}
cl_int _WRAPLIB_API_CALL clSetDefaultDeviceCommandQueue(cl_context arg0, cl_device_id arg1, cl_command_queue arg2) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_context, cl_device_id, cl_command_queue);
    ON_ENTRY(clSetDefaultDeviceCommandQueue);
    f_ptr_t f = (f_ptr_t)(g_func_table[7]);
    return f(arg0, arg1, arg2);
}
cl_int _WRAPLIB_API_CALL clGetDeviceAndHostTimer(cl_device_id arg0, cl_ulong *arg1, cl_ulong *arg2) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_device_id, cl_ulong *, cl_ulong *);
    ON_ENTRY(clGetDeviceAndHostTimer);
    f_ptr_t f = (f_ptr_t)(g_func_table[8]);
    return f(arg0, arg1, arg2);
}
cl_int _WRAPLIB_API_CALL clGetHostTimer(cl_device_id arg0, cl_ulong *arg1) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_device_id, cl_ulong *);
    ON_ENTRY(clGetHostTimer);
    f_ptr_t f = (f_ptr_t)(g_func_table[9]);
    return f(arg0, arg1);
}
cl_context _WRAPLIB_API_CALL clCreateContext(const cl_context_properties *arg0, cl_uint arg1, const cl_device_id *arg2, void (_WRAPLIB_CALLBACK *arg3)(const char *, const void *, size_t, void *), void *arg4, cl_int *arg5) {
    typedef cl_context (_WRAPLIB_API_CALL *f_ptr_t)(const cl_context_properties *, cl_uint, const cl_device_id *, void (_WRAPLIB_CALLBACK *)(const char *, const void *, size_t, void *), void *, cl_int *);
    ON_ENTRY(clCreateContext);
    f_ptr_t f = (f_ptr_t)(g_func_table[10]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5);
}
cl_context _WRAPLIB_API_CALL clCreateContextFromType(const cl_context_properties *arg0, cl_device_type arg1, void (_WRAPLIB_CALLBACK *arg2)(const char *, const void *, size_t, void *), void *arg3, cl_int *arg4) {
    typedef cl_context (_WRAPLIB_API_CALL *f_ptr_t)(const cl_context_properties *, cl_device_type, void (_WRAPLIB_CALLBACK *)(const char *, const void *, size_t, void *), void *, cl_int *);
    ON_ENTRY(clCreateContextFromType);
    f_ptr_t f = (f_ptr_t)(g_func_table[11]);
    return f(arg0, arg1, arg2, arg3, arg4);
}
cl_int _WRAPLIB_API_CALL clRetainContext(cl_context arg0) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_context);
    ON_ENTRY(clRetainContext);
    f_ptr_t f = (f_ptr_t)(g_func_table[12]);
    return f(arg0);
}
cl_int _WRAPLIB_API_CALL clReleaseContext(cl_context arg0) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_context);
    ON_ENTRY(clReleaseContext);
    f_ptr_t f = (f_ptr_t)(g_func_table[13]);
    return f(arg0);
}
cl_int _WRAPLIB_API_CALL clGetContextInfo(cl_context arg0, cl_context_info arg1, size_t arg2, void *arg3, size_t *arg4) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_context, cl_context_info, size_t, void *, size_t *);
    ON_ENTRY(clGetContextInfo);
    f_ptr_t f = (f_ptr_t)(g_func_table[14]);
    return f(arg0, arg1, arg2, arg3, arg4);
}
cl_int _WRAPLIB_API_CALL clSetContextDestructorCallback(cl_context arg0, void (_WRAPLIB_CALLBACK *arg1)(cl_context, void *), void *arg2) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_context, void (_WRAPLIB_CALLBACK *)(cl_context, void *), void *);
    ON_ENTRY(clSetContextDestructorCallback);
    f_ptr_t f = (f_ptr_t)(g_func_table[15]);
    return f(arg0, arg1, arg2);
}
cl_command_queue _WRAPLIB_API_CALL clCreateCommandQueueWithProperties(cl_context arg0, cl_device_id arg1, const cl_queue_properties *arg2, cl_int *arg3) {
    typedef cl_command_queue (_WRAPLIB_API_CALL *f_ptr_t)(cl_context, cl_device_id, const cl_queue_properties *, cl_int *);
    ON_ENTRY(clCreateCommandQueueWithProperties);
    f_ptr_t f = (f_ptr_t)(g_func_table[16]);
    return f(arg0, arg1, arg2, arg3);
}
cl_int _WRAPLIB_API_CALL clRetainCommandQueue(cl_command_queue arg0) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue);
    ON_ENTRY(clRetainCommandQueue);
    f_ptr_t f = (f_ptr_t)(g_func_table[17]);
    return f(arg0);
}
cl_int _WRAPLIB_API_CALL clReleaseCommandQueue(cl_command_queue arg0) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue);
    ON_ENTRY(clReleaseCommandQueue);
    f_ptr_t f = (f_ptr_t)(g_func_table[18]);
    return f(arg0);
}
cl_int _WRAPLIB_API_CALL clGetCommandQueueInfo(cl_command_queue arg0, cl_command_queue_info arg1, size_t arg2, void *arg3, size_t *arg4) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue, cl_command_queue_info, size_t, void *, size_t *);
    ON_ENTRY(clGetCommandQueueInfo);
    f_ptr_t f = (f_ptr_t)(g_func_table[19]);
    return f(arg0, arg1, arg2, arg3, arg4);
}
cl_mem _WRAPLIB_API_CALL clCreateBuffer(cl_context arg0, cl_mem_flags arg1, size_t arg2, void *arg3, cl_int *arg4) {
    typedef cl_mem (_WRAPLIB_API_CALL *f_ptr_t)(cl_context, cl_mem_flags, size_t, void *, cl_int *);
    ON_ENTRY(clCreateBuffer);
    f_ptr_t f = (f_ptr_t)(g_func_table[20]);
    return f(arg0, arg1, arg2, arg3, arg4);
}
cl_mem _WRAPLIB_API_CALL clCreateSubBuffer(cl_mem arg0, cl_mem_flags arg1, cl_buffer_create_type arg2, const void *arg3, cl_int *arg4) {
    typedef cl_mem (_WRAPLIB_API_CALL *f_ptr_t)(cl_mem, cl_mem_flags, cl_buffer_create_type, const void *, cl_int *);
    ON_ENTRY(clCreateSubBuffer);
    f_ptr_t f = (f_ptr_t)(g_func_table[21]);
    return f(arg0, arg1, arg2, arg3, arg4);
}
cl_mem _WRAPLIB_API_CALL clCreateImage(cl_context arg0, cl_mem_flags arg1, const cl_image_format *arg2, const cl_image_desc *arg3, void *arg4, cl_int *arg5) {
    typedef cl_mem (_WRAPLIB_API_CALL *f_ptr_t)(cl_context, cl_mem_flags, const cl_image_format *, const cl_image_desc *, void *, cl_int *);
    ON_ENTRY(clCreateImage);
    f_ptr_t f = (f_ptr_t)(g_func_table[22]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5);
}
cl_mem _WRAPLIB_API_CALL clCreatePipe(cl_context arg0, cl_mem_flags arg1, cl_uint arg2, cl_uint arg3, const cl_pipe_properties *arg4, cl_int *arg5) {
    typedef cl_mem (_WRAPLIB_API_CALL *f_ptr_t)(cl_context, cl_mem_flags, cl_uint, cl_uint, const cl_pipe_properties *, cl_int *);
    ON_ENTRY(clCreatePipe);
    f_ptr_t f = (f_ptr_t)(g_func_table[23]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5);
}
cl_mem _WRAPLIB_API_CALL clCreateBufferWithProperties(cl_context arg0, const cl_mem_properties *arg1, cl_mem_flags arg2, size_t arg3, void *arg4, cl_int *arg5) {
    typedef cl_mem (_WRAPLIB_API_CALL *f_ptr_t)(cl_context, const cl_mem_properties *, cl_mem_flags, size_t, void *, cl_int *);
    ON_ENTRY(clCreateBufferWithProperties);
    f_ptr_t f = (f_ptr_t)(g_func_table[24]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5);
}
cl_mem _WRAPLIB_API_CALL clCreateImageWithProperties(cl_context arg0, const cl_mem_properties *arg1, cl_mem_flags arg2, const cl_image_format *arg3, const cl_image_desc *arg4, void *arg5, cl_int *arg6) {
    typedef cl_mem (_WRAPLIB_API_CALL *f_ptr_t)(cl_context, const cl_mem_properties *, cl_mem_flags, const cl_image_format *, const cl_image_desc *, void *, cl_int *);
    ON_ENTRY(clCreateImageWithProperties);
    f_ptr_t f = (f_ptr_t)(g_func_table[25]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
}
cl_int _WRAPLIB_API_CALL clRetainMemObject(cl_mem arg0) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_mem);
    ON_ENTRY(clRetainMemObject);
    f_ptr_t f = (f_ptr_t)(g_func_table[26]);
    return f(arg0);
}
cl_int _WRAPLIB_API_CALL clReleaseMemObject(cl_mem arg0) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_mem);
    ON_ENTRY(clReleaseMemObject);
    f_ptr_t f = (f_ptr_t)(g_func_table[27]);
    return f(arg0);
}
cl_int _WRAPLIB_API_CALL clGetSupportedImageFormats(cl_context arg0, cl_mem_flags arg1, cl_mem_object_type arg2, cl_uint arg3, cl_image_format *arg4, cl_uint *arg5) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_context, cl_mem_flags, cl_mem_object_type, cl_uint, cl_image_format *, cl_uint *);
    ON_ENTRY(clGetSupportedImageFormats);
    f_ptr_t f = (f_ptr_t)(g_func_table[28]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5);
}
cl_int _WRAPLIB_API_CALL clGetMemObjectInfo(cl_mem arg0, cl_mem_info arg1, size_t arg2, void *arg3, size_t *arg4) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_mem, cl_mem_info, size_t, void *, size_t *);
    ON_ENTRY(clGetMemObjectInfo);
    f_ptr_t f = (f_ptr_t)(g_func_table[29]);
    return f(arg0, arg1, arg2, arg3, arg4);
}
cl_int _WRAPLIB_API_CALL clGetImageInfo(cl_mem arg0, cl_image_info arg1, size_t arg2, void *arg3, size_t *arg4) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_mem, cl_image_info, size_t, void *, size_t *);
    ON_ENTRY(clGetImageInfo);
    f_ptr_t f = (f_ptr_t)(g_func_table[30]);
    return f(arg0, arg1, arg2, arg3, arg4);
}
cl_int _WRAPLIB_API_CALL clGetPipeInfo(cl_mem arg0, cl_pipe_info arg1, size_t arg2, void *arg3, size_t *arg4) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_mem, cl_pipe_info, size_t, void *, size_t *);
    ON_ENTRY(clGetPipeInfo);
    f_ptr_t f = (f_ptr_t)(g_func_table[31]);
    return f(arg0, arg1, arg2, arg3, arg4);
}
cl_int _WRAPLIB_API_CALL clSetMemObjectDestructorCallback(cl_mem arg0, void (_WRAPLIB_CALLBACK *arg1)(cl_mem, void *), void *arg2) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_mem, void (_WRAPLIB_CALLBACK *)(cl_mem, void *), void *);
    ON_ENTRY(clSetMemObjectDestructorCallback);
    f_ptr_t f = (f_ptr_t)(g_func_table[32]);
    return f(arg0, arg1, arg2);
}
void _WRAPLIB_API_CALL *clSVMAlloc(cl_context arg0, cl_svm_mem_flags arg1, size_t arg2, cl_uint arg3) {
    typedef void *(_WRAPLIB_API_CALL *f_ptr_t)(cl_context, cl_svm_mem_flags, size_t, cl_uint);
    ON_ENTRY(clSVMAlloc);
    f_ptr_t f = (f_ptr_t)(g_func_table[33]);
    return f(arg0, arg1, arg2, arg3);
}
void _WRAPLIB_API_CALL clSVMFree(cl_context arg0, void *arg1) {
    typedef void (_WRAPLIB_API_CALL *f_ptr_t)(cl_context, void *);
    ON_ENTRY(clSVMFree);
    f_ptr_t f = (f_ptr_t)(g_func_table[34]);
    return f(arg0, arg1);
}
cl_sampler _WRAPLIB_API_CALL clCreateSamplerWithProperties(cl_context arg0, const cl_sampler_properties *arg1, cl_int *arg2) {
    typedef cl_sampler (_WRAPLIB_API_CALL *f_ptr_t)(cl_context, const cl_sampler_properties *, cl_int *);
    ON_ENTRY(clCreateSamplerWithProperties);
    f_ptr_t f = (f_ptr_t)(g_func_table[35]);
    return f(arg0, arg1, arg2);
}
cl_int _WRAPLIB_API_CALL clRetainSampler(cl_sampler arg0) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_sampler);
    ON_ENTRY(clRetainSampler);
    f_ptr_t f = (f_ptr_t)(g_func_table[36]);
    return f(arg0);
}
cl_int _WRAPLIB_API_CALL clReleaseSampler(cl_sampler arg0) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_sampler);
    ON_ENTRY(clReleaseSampler);
    f_ptr_t f = (f_ptr_t)(g_func_table[37]);
    return f(arg0);
}
cl_int _WRAPLIB_API_CALL clGetSamplerInfo(cl_sampler arg0, cl_sampler_info arg1, size_t arg2, void *arg3, size_t *arg4) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_sampler, cl_sampler_info, size_t, void *, size_t *);
    ON_ENTRY(clGetSamplerInfo);
    f_ptr_t f = (f_ptr_t)(g_func_table[38]);
    return f(arg0, arg1, arg2, arg3, arg4);
}
cl_program _WRAPLIB_API_CALL clCreateProgramWithSource(cl_context arg0, cl_uint arg1, const char **arg2, const size_t *arg3, cl_int *arg4) {
    typedef cl_program (_WRAPLIB_API_CALL *f_ptr_t)(cl_context, cl_uint, const char **, const size_t *, cl_int *);
    ON_ENTRY(clCreateProgramWithSource);
    f_ptr_t f = (f_ptr_t)(g_func_table[39]);
    return f(arg0, arg1, arg2, arg3, arg4);
}
cl_program _WRAPLIB_API_CALL clCreateProgramWithBinary(cl_context arg0, cl_uint arg1, const cl_device_id *arg2, const size_t *arg3, const unsigned char **arg4, cl_int *arg5, cl_int *arg6) {
    typedef cl_program (_WRAPLIB_API_CALL *f_ptr_t)(cl_context, cl_uint, const cl_device_id *, const size_t *, const unsigned char **, cl_int *, cl_int *);
    ON_ENTRY(clCreateProgramWithBinary);
    f_ptr_t f = (f_ptr_t)(g_func_table[40]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
}
cl_program _WRAPLIB_API_CALL clCreateProgramWithBuiltInKernels(cl_context arg0, cl_uint arg1, const cl_device_id *arg2, const char *arg3, cl_int *arg4) {
    typedef cl_program (_WRAPLIB_API_CALL *f_ptr_t)(cl_context, cl_uint, const cl_device_id *, const char *, cl_int *);
    ON_ENTRY(clCreateProgramWithBuiltInKernels);
    f_ptr_t f = (f_ptr_t)(g_func_table[41]);
    return f(arg0, arg1, arg2, arg3, arg4);
}
cl_program _WRAPLIB_API_CALL clCreateProgramWithIL(cl_context arg0, const void *arg1, size_t arg2, cl_int *arg3) {
    typedef cl_program (_WRAPLIB_API_CALL *f_ptr_t)(cl_context, const void *, size_t, cl_int *);
    ON_ENTRY(clCreateProgramWithIL);
    f_ptr_t f = (f_ptr_t)(g_func_table[42]);
    return f(arg0, arg1, arg2, arg3);
}
cl_int _WRAPLIB_API_CALL clRetainProgram(cl_program arg0) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_program);
    ON_ENTRY(clRetainProgram);
    f_ptr_t f = (f_ptr_t)(g_func_table[43]);
    return f(arg0);
}
cl_int _WRAPLIB_API_CALL clReleaseProgram(cl_program arg0) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_program);
    ON_ENTRY(clReleaseProgram);
    f_ptr_t f = (f_ptr_t)(g_func_table[44]);
    return f(arg0);
}
cl_int _WRAPLIB_API_CALL clBuildProgram(cl_program arg0, cl_uint arg1, const cl_device_id *arg2, const char *arg3, void (_WRAPLIB_CALLBACK *arg4)(cl_program, void *), void *arg5) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_program, cl_uint, const cl_device_id *, const char *, void (_WRAPLIB_CALLBACK *)(cl_program, void *), void *);
    ON_ENTRY(clBuildProgram);
    f_ptr_t f = (f_ptr_t)(g_func_table[45]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5);
}
cl_int _WRAPLIB_API_CALL clCompileProgram(cl_program arg0, cl_uint arg1, const cl_device_id *arg2, const char *arg3, cl_uint arg4, const cl_program *arg5, const char **arg6, void (_WRAPLIB_CALLBACK *arg7)(cl_program, void *), void *arg8) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_program, cl_uint, const cl_device_id *, const char *, cl_uint, const cl_program *, const char **, void (_WRAPLIB_CALLBACK *)(cl_program, void *), void *);
    ON_ENTRY(clCompileProgram);
    f_ptr_t f = (f_ptr_t)(g_func_table[46]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}
cl_program _WRAPLIB_API_CALL clLinkProgram(cl_context arg0, cl_uint arg1, const cl_device_id *arg2, const char *arg3, cl_uint arg4, const cl_program *arg5, void (_WRAPLIB_CALLBACK *arg6)(cl_program, void *), void *arg7, cl_int *arg8) {
    typedef cl_program (_WRAPLIB_API_CALL *f_ptr_t)(cl_context, cl_uint, const cl_device_id *, const char *, cl_uint, const cl_program *, void (_WRAPLIB_CALLBACK *)(cl_program, void *), void *, cl_int *);
    ON_ENTRY(clLinkProgram);
    f_ptr_t f = (f_ptr_t)(g_func_table[47]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}
cl_int _WRAPLIB_API_CALL clSetProgramReleaseCallback(cl_program arg0, void (_WRAPLIB_CALLBACK *arg1)(cl_program, void *), void *arg2) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_program, void (_WRAPLIB_CALLBACK *)(cl_program, void *), void *);
    ON_ENTRY(clSetProgramReleaseCallback);
    f_ptr_t f = (f_ptr_t)(g_func_table[48]);
    return f(arg0, arg1, arg2);
}
cl_int _WRAPLIB_API_CALL clSetProgramSpecializationConstant(cl_program arg0, cl_uint arg1, size_t arg2, const void *arg3) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_program, cl_uint, size_t, const void *);
    ON_ENTRY(clSetProgramSpecializationConstant);
    f_ptr_t f = (f_ptr_t)(g_func_table[49]);
    return f(arg0, arg1, arg2, arg3);
}
cl_int _WRAPLIB_API_CALL clUnloadPlatformCompiler(cl_platform_id arg0) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_platform_id);
    ON_ENTRY(clUnloadPlatformCompiler);
    f_ptr_t f = (f_ptr_t)(g_func_table[50]);
    return f(arg0);
}
cl_int _WRAPLIB_API_CALL clGetProgramInfo(cl_program arg0, cl_program_info arg1, size_t arg2, void *arg3, size_t *arg4) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_program, cl_program_info, size_t, void *, size_t *);
    ON_ENTRY(clGetProgramInfo);
    f_ptr_t f = (f_ptr_t)(g_func_table[51]);
    return f(arg0, arg1, arg2, arg3, arg4);
}
cl_int _WRAPLIB_API_CALL clGetProgramBuildInfo(cl_program arg0, cl_device_id arg1, cl_program_build_info arg2, size_t arg3, void *arg4, size_t *arg5) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_program, cl_device_id, cl_program_build_info, size_t, void *, size_t *);
    ON_ENTRY(clGetProgramBuildInfo);
    f_ptr_t f = (f_ptr_t)(g_func_table[52]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5);
}
cl_kernel _WRAPLIB_API_CALL clCreateKernel(cl_program arg0, const char *arg1, cl_int *arg2) {
    typedef cl_kernel (_WRAPLIB_API_CALL *f_ptr_t)(cl_program, const char *, cl_int *);
    ON_ENTRY(clCreateKernel);
    f_ptr_t f = (f_ptr_t)(g_func_table[53]);
    return f(arg0, arg1, arg2);
}
cl_int _WRAPLIB_API_CALL clCreateKernelsInProgram(cl_program arg0, cl_uint arg1, cl_kernel *arg2, cl_uint *arg3) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_program, cl_uint, cl_kernel *, cl_uint *);
    ON_ENTRY(clCreateKernelsInProgram);
    f_ptr_t f = (f_ptr_t)(g_func_table[54]);
    return f(arg0, arg1, arg2, arg3);
}
cl_kernel _WRAPLIB_API_CALL clCloneKernel(cl_kernel arg0, cl_int *arg1) {
    typedef cl_kernel (_WRAPLIB_API_CALL *f_ptr_t)(cl_kernel, cl_int *);
    ON_ENTRY(clCloneKernel);
    f_ptr_t f = (f_ptr_t)(g_func_table[55]);
    return f(arg0, arg1);
}
cl_int _WRAPLIB_API_CALL clRetainKernel(cl_kernel arg0) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_kernel);
    ON_ENTRY(clRetainKernel);
    f_ptr_t f = (f_ptr_t)(g_func_table[56]);
    return f(arg0);
}
cl_int _WRAPLIB_API_CALL clReleaseKernel(cl_kernel arg0) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_kernel);
    ON_ENTRY(clReleaseKernel);
    f_ptr_t f = (f_ptr_t)(g_func_table[57]);
    return f(arg0);
}
cl_int _WRAPLIB_API_CALL clSetKernelArg(cl_kernel arg0, cl_uint arg1, size_t arg2, const void *arg3) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_kernel, cl_uint, size_t, const void *);
    ON_ENTRY(clSetKernelArg);
    f_ptr_t f = (f_ptr_t)(g_func_table[58]);
    return f(arg0, arg1, arg2, arg3);
}
cl_int _WRAPLIB_API_CALL clSetKernelArgSVMPointer(cl_kernel arg0, cl_uint arg1, const void *arg2) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_kernel, cl_uint, const void *);
    ON_ENTRY(clSetKernelArgSVMPointer);
    f_ptr_t f = (f_ptr_t)(g_func_table[59]);
    return f(arg0, arg1, arg2);
}
cl_int _WRAPLIB_API_CALL clSetKernelExecInfo(cl_kernel arg0, cl_kernel_exec_info arg1, size_t arg2, const void *arg3) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_kernel, cl_kernel_exec_info, size_t, const void *);
    ON_ENTRY(clSetKernelExecInfo);
    f_ptr_t f = (f_ptr_t)(g_func_table[60]);
    return f(arg0, arg1, arg2, arg3);
}
cl_int _WRAPLIB_API_CALL clGetKernelInfo(cl_kernel arg0, cl_kernel_info arg1, size_t arg2, void *arg3, size_t *arg4) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_kernel, cl_kernel_info, size_t, void *, size_t *);
    ON_ENTRY(clGetKernelInfo);
    f_ptr_t f = (f_ptr_t)(g_func_table[61]);
    return f(arg0, arg1, arg2, arg3, arg4);
}
cl_int _WRAPLIB_API_CALL clGetKernelArgInfo(cl_kernel arg0, cl_uint arg1, cl_kernel_arg_info arg2, size_t arg3, void *arg4, size_t *arg5) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_kernel, cl_uint, cl_kernel_arg_info, size_t, void *, size_t *);
    ON_ENTRY(clGetKernelArgInfo);
    f_ptr_t f = (f_ptr_t)(g_func_table[62]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5);
}
cl_int _WRAPLIB_API_CALL clGetKernelWorkGroupInfo(cl_kernel arg0, cl_device_id arg1, cl_kernel_work_group_info arg2, size_t arg3, void *arg4, size_t *arg5) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_kernel, cl_device_id, cl_kernel_work_group_info, size_t, void *, size_t *);
    ON_ENTRY(clGetKernelWorkGroupInfo);
    f_ptr_t f = (f_ptr_t)(g_func_table[63]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5);
}
cl_int _WRAPLIB_API_CALL clGetKernelSubGroupInfo(cl_kernel arg0, cl_device_id arg1, cl_kernel_sub_group_info arg2, size_t arg3, const void *arg4, size_t arg5, void *arg6, size_t *arg7) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_kernel, cl_device_id, cl_kernel_sub_group_info, size_t, const void *, size_t, void *, size_t *);
    ON_ENTRY(clGetKernelSubGroupInfo);
    f_ptr_t f = (f_ptr_t)(g_func_table[64]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
}
cl_int _WRAPLIB_API_CALL clWaitForEvents(cl_uint arg0, const cl_event *arg1) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_uint, const cl_event *);
    ON_ENTRY(clWaitForEvents);
    f_ptr_t f = (f_ptr_t)(g_func_table[65]);
    return f(arg0, arg1);
}
cl_int _WRAPLIB_API_CALL clGetEventInfo(cl_event arg0, cl_event_info arg1, size_t arg2, void *arg3, size_t *arg4) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_event, cl_event_info, size_t, void *, size_t *);
    ON_ENTRY(clGetEventInfo);
    f_ptr_t f = (f_ptr_t)(g_func_table[66]);
    return f(arg0, arg1, arg2, arg3, arg4);
}
cl_event _WRAPLIB_API_CALL clCreateUserEvent(cl_context arg0, cl_int *arg1) {
    typedef cl_event (_WRAPLIB_API_CALL *f_ptr_t)(cl_context, cl_int *);
    ON_ENTRY(clCreateUserEvent);
    f_ptr_t f = (f_ptr_t)(g_func_table[67]);
    return f(arg0, arg1);
}
cl_int _WRAPLIB_API_CALL clRetainEvent(cl_event arg0) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_event);
    ON_ENTRY(clRetainEvent);
    f_ptr_t f = (f_ptr_t)(g_func_table[68]);
    return f(arg0);
}
cl_int _WRAPLIB_API_CALL clReleaseEvent(cl_event arg0) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_event);
    ON_ENTRY(clReleaseEvent);
    f_ptr_t f = (f_ptr_t)(g_func_table[69]);
    return f(arg0);
}
cl_int _WRAPLIB_API_CALL clSetUserEventStatus(cl_event arg0, cl_int arg1) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_event, cl_int);
    ON_ENTRY(clSetUserEventStatus);
    f_ptr_t f = (f_ptr_t)(g_func_table[70]);
    return f(arg0, arg1);
}
cl_int _WRAPLIB_API_CALL clSetEventCallback(cl_event arg0, cl_int arg1, void (_WRAPLIB_CALLBACK *arg2)(cl_event, cl_int, void *), void *arg3) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_event, cl_int, void (_WRAPLIB_CALLBACK *)(cl_event, cl_int, void *), void *);
    ON_ENTRY(clSetEventCallback);
    f_ptr_t f = (f_ptr_t)(g_func_table[71]);
    return f(arg0, arg1, arg2, arg3);
}
cl_int _WRAPLIB_API_CALL clGetEventProfilingInfo(cl_event arg0, cl_profiling_info arg1, size_t arg2, void *arg3, size_t *arg4) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_event, cl_profiling_info, size_t, void *, size_t *);
    ON_ENTRY(clGetEventProfilingInfo);
    f_ptr_t f = (f_ptr_t)(g_func_table[72]);
    return f(arg0, arg1, arg2, arg3, arg4);
}
cl_int _WRAPLIB_API_CALL clFlush(cl_command_queue arg0) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue);
    ON_ENTRY(clFlush);
    f_ptr_t f = (f_ptr_t)(g_func_table[73]);
    return f(arg0);
}
cl_int _WRAPLIB_API_CALL clFinish(cl_command_queue arg0) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue);
    ON_ENTRY(clFinish);
    f_ptr_t f = (f_ptr_t)(g_func_table[74]);
    return f(arg0);
}
cl_int _WRAPLIB_API_CALL clEnqueueReadBuffer(cl_command_queue arg0, cl_mem arg1, cl_bool arg2, size_t arg3, size_t arg4, void *arg5, cl_uint arg6, const cl_event *arg7, cl_event *arg8) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue, cl_mem, cl_bool, size_t, size_t, void *, cl_uint, const cl_event *, cl_event *);
    ON_ENTRY(clEnqueueReadBuffer);
    f_ptr_t f = (f_ptr_t)(g_func_table[75]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}
cl_int _WRAPLIB_API_CALL clEnqueueReadBufferRect(cl_command_queue arg0, cl_mem arg1, cl_bool arg2, const size_t *arg3, const size_t *arg4, const size_t *arg5, size_t arg6, size_t arg7, size_t arg8, size_t arg9, void *arg10, cl_uint arg11, const cl_event *arg12, cl_event *arg13) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue, cl_mem, cl_bool, const size_t *, const size_t *, const size_t *, size_t, size_t, size_t, size_t, void *, cl_uint, const cl_event *, cl_event *);
    ON_ENTRY(clEnqueueReadBufferRect);
    f_ptr_t f = (f_ptr_t)(g_func_table[76]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
}
cl_int _WRAPLIB_API_CALL clEnqueueWriteBuffer(cl_command_queue arg0, cl_mem arg1, cl_bool arg2, size_t arg3, size_t arg4, const void *arg5, cl_uint arg6, const cl_event *arg7, cl_event *arg8) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue, cl_mem, cl_bool, size_t, size_t, const void *, cl_uint, const cl_event *, cl_event *);
    ON_ENTRY(clEnqueueWriteBuffer);
    f_ptr_t f = (f_ptr_t)(g_func_table[77]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}
cl_int _WRAPLIB_API_CALL clEnqueueWriteBufferRect(cl_command_queue arg0, cl_mem arg1, cl_bool arg2, const size_t *arg3, const size_t *arg4, const size_t *arg5, size_t arg6, size_t arg7, size_t arg8, size_t arg9, const void *arg10, cl_uint arg11, const cl_event *arg12, cl_event *arg13) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue, cl_mem, cl_bool, const size_t *, const size_t *, const size_t *, size_t, size_t, size_t, size_t, const void *, cl_uint, const cl_event *, cl_event *);
    ON_ENTRY(clEnqueueWriteBufferRect);
    f_ptr_t f = (f_ptr_t)(g_func_table[78]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
}
cl_int _WRAPLIB_API_CALL clEnqueueFillBuffer(cl_command_queue arg0, cl_mem arg1, const void *arg2, size_t arg3, size_t arg4, size_t arg5, cl_uint arg6, const cl_event *arg7, cl_event *arg8) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue, cl_mem, const void *, size_t, size_t, size_t, cl_uint, const cl_event *, cl_event *);
    ON_ENTRY(clEnqueueFillBuffer);
    f_ptr_t f = (f_ptr_t)(g_func_table[79]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}
cl_int _WRAPLIB_API_CALL clEnqueueCopyBuffer(cl_command_queue arg0, cl_mem arg1, cl_mem arg2, size_t arg3, size_t arg4, size_t arg5, cl_uint arg6, const cl_event *arg7, cl_event *arg8) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue, cl_mem, cl_mem, size_t, size_t, size_t, cl_uint, const cl_event *, cl_event *);
    ON_ENTRY(clEnqueueCopyBuffer);
    f_ptr_t f = (f_ptr_t)(g_func_table[80]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}
cl_int _WRAPLIB_API_CALL clEnqueueCopyBufferRect(cl_command_queue arg0, cl_mem arg1, cl_mem arg2, const size_t *arg3, const size_t *arg4, const size_t *arg5, size_t arg6, size_t arg7, size_t arg8, size_t arg9, cl_uint arg10, const cl_event *arg11, cl_event *arg12) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue, cl_mem, cl_mem, const size_t *, const size_t *, const size_t *, size_t, size_t, size_t, size_t, cl_uint, const cl_event *, cl_event *);
    ON_ENTRY(clEnqueueCopyBufferRect);
    f_ptr_t f = (f_ptr_t)(g_func_table[81]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
}
cl_int _WRAPLIB_API_CALL clEnqueueReadImage(cl_command_queue arg0, cl_mem arg1, cl_bool arg2, const size_t *arg3, const size_t *arg4, size_t arg5, size_t arg6, void *arg7, cl_uint arg8, const cl_event *arg9, cl_event *arg10) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue, cl_mem, cl_bool, const size_t *, const size_t *, size_t, size_t, void *, cl_uint, const cl_event *, cl_event *);
    ON_ENTRY(clEnqueueReadImage);
    f_ptr_t f = (f_ptr_t)(g_func_table[82]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
}
cl_int _WRAPLIB_API_CALL clEnqueueWriteImage(cl_command_queue arg0, cl_mem arg1, cl_bool arg2, const size_t *arg3, const size_t *arg4, size_t arg5, size_t arg6, const void *arg7, cl_uint arg8, const cl_event *arg9, cl_event *arg10) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue, cl_mem, cl_bool, const size_t *, const size_t *, size_t, size_t, const void *, cl_uint, const cl_event *, cl_event *);
    ON_ENTRY(clEnqueueWriteImage);
    f_ptr_t f = (f_ptr_t)(g_func_table[83]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
}
cl_int _WRAPLIB_API_CALL clEnqueueFillImage(cl_command_queue arg0, cl_mem arg1, const void *arg2, const size_t *arg3, const size_t *arg4, cl_uint arg5, const cl_event *arg6, cl_event *arg7) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue, cl_mem, const void *, const size_t *, const size_t *, cl_uint, const cl_event *, cl_event *);
    ON_ENTRY(clEnqueueFillImage);
    f_ptr_t f = (f_ptr_t)(g_func_table[84]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
}
cl_int _WRAPLIB_API_CALL clEnqueueCopyImage(cl_command_queue arg0, cl_mem arg1, cl_mem arg2, const size_t *arg3, const size_t *arg4, const size_t *arg5, cl_uint arg6, const cl_event *arg7, cl_event *arg8) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue, cl_mem, cl_mem, const size_t *, const size_t *, const size_t *, cl_uint, const cl_event *, cl_event *);
    ON_ENTRY(clEnqueueCopyImage);
    f_ptr_t f = (f_ptr_t)(g_func_table[85]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}
cl_int _WRAPLIB_API_CALL clEnqueueCopyImageToBuffer(cl_command_queue arg0, cl_mem arg1, cl_mem arg2, const size_t *arg3, const size_t *arg4, size_t arg5, cl_uint arg6, const cl_event *arg7, cl_event *arg8) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue, cl_mem, cl_mem, const size_t *, const size_t *, size_t, cl_uint, const cl_event *, cl_event *);
    ON_ENTRY(clEnqueueCopyImageToBuffer);
    f_ptr_t f = (f_ptr_t)(g_func_table[86]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}
cl_int _WRAPLIB_API_CALL clEnqueueCopyBufferToImage(cl_command_queue arg0, cl_mem arg1, cl_mem arg2, size_t arg3, const size_t *arg4, const size_t *arg5, cl_uint arg6, const cl_event *arg7, cl_event *arg8) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue, cl_mem, cl_mem, size_t, const size_t *, const size_t *, cl_uint, const cl_event *, cl_event *);
    ON_ENTRY(clEnqueueCopyBufferToImage);
    f_ptr_t f = (f_ptr_t)(g_func_table[87]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}
void _WRAPLIB_API_CALL *clEnqueueMapBuffer(cl_command_queue arg0, cl_mem arg1, cl_bool arg2, cl_map_flags arg3, size_t arg4, size_t arg5, cl_uint arg6, const cl_event *arg7, cl_event *arg8, cl_int *arg9) {
    typedef void *(_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue, cl_mem, cl_bool, cl_map_flags, size_t, size_t, cl_uint, const cl_event *, cl_event *, cl_int *);
    ON_ENTRY(clEnqueueMapBuffer);
    f_ptr_t f = (f_ptr_t)(g_func_table[88]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
}
void _WRAPLIB_API_CALL *clEnqueueMapImage(cl_command_queue arg0, cl_mem arg1, cl_bool arg2, cl_map_flags arg3, const size_t *arg4, const size_t *arg5, size_t *arg6, size_t *arg7, cl_uint arg8, const cl_event *arg9, cl_event *arg10, cl_int *arg11) {
    typedef void *(_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue, cl_mem, cl_bool, cl_map_flags, const size_t *, const size_t *, size_t *, size_t *, cl_uint, const cl_event *, cl_event *, cl_int *);
    ON_ENTRY(clEnqueueMapImage);
    f_ptr_t f = (f_ptr_t)(g_func_table[89]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
}
cl_int _WRAPLIB_API_CALL clEnqueueUnmapMemObject(cl_command_queue arg0, cl_mem arg1, void *arg2, cl_uint arg3, const cl_event *arg4, cl_event *arg5) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue, cl_mem, void *, cl_uint, const cl_event *, cl_event *);
    ON_ENTRY(clEnqueueUnmapMemObject);
    f_ptr_t f = (f_ptr_t)(g_func_table[90]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5);
}
cl_int _WRAPLIB_API_CALL clEnqueueMigrateMemObjects(cl_command_queue arg0, cl_uint arg1, const cl_mem *arg2, cl_mem_migration_flags arg3, cl_uint arg4, const cl_event *arg5, cl_event *arg6) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue, cl_uint, const cl_mem *, cl_mem_migration_flags, cl_uint, const cl_event *, cl_event *);
    ON_ENTRY(clEnqueueMigrateMemObjects);
    f_ptr_t f = (f_ptr_t)(g_func_table[91]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
}
cl_int _WRAPLIB_API_CALL clEnqueueNDRangeKernel(cl_command_queue arg0, cl_kernel arg1, cl_uint arg2, const size_t *arg3, const size_t *arg4, const size_t *arg5, cl_uint arg6, const cl_event *arg7, cl_event *arg8) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue, cl_kernel, cl_uint, const size_t *, const size_t *, const size_t *, cl_uint, const cl_event *, cl_event *);
    ON_ENTRY(clEnqueueNDRangeKernel);
    f_ptr_t f = (f_ptr_t)(g_func_table[92]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}
cl_int _WRAPLIB_API_CALL clEnqueueNativeKernel(cl_command_queue arg0, void (_WRAPLIB_CALLBACK *arg1)(void *), void *arg2, size_t arg3, cl_uint arg4, const cl_mem *arg5, const void **arg6, cl_uint arg7, const cl_event *arg8, cl_event *arg9) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue, void (_WRAPLIB_CALLBACK *)(void *), void *, size_t, cl_uint, const cl_mem *, const void **, cl_uint, const cl_event *, cl_event *);
    ON_ENTRY(clEnqueueNativeKernel);
    f_ptr_t f = (f_ptr_t)(g_func_table[93]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
}
cl_int _WRAPLIB_API_CALL clEnqueueMarkerWithWaitList(cl_command_queue arg0, cl_uint arg1, const cl_event *arg2, cl_event *arg3) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue, cl_uint, const cl_event *, cl_event *);
    ON_ENTRY(clEnqueueMarkerWithWaitList);
    f_ptr_t f = (f_ptr_t)(g_func_table[94]);
    return f(arg0, arg1, arg2, arg3);
}
cl_int _WRAPLIB_API_CALL clEnqueueBarrierWithWaitList(cl_command_queue arg0, cl_uint arg1, const cl_event *arg2, cl_event *arg3) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue, cl_uint, const cl_event *, cl_event *);
    ON_ENTRY(clEnqueueBarrierWithWaitList);
    f_ptr_t f = (f_ptr_t)(g_func_table[95]);
    return f(arg0, arg1, arg2, arg3);
}
cl_int _WRAPLIB_API_CALL clEnqueueSVMFree(cl_command_queue arg0, cl_uint arg1, void *arg2[], void (_WRAPLIB_CALLBACK *arg3)(cl_command_queue, cl_uint, void *[], void *), void *arg4, cl_uint arg5, const cl_event *arg6, cl_event *arg7) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue, cl_uint, void *[], void (_WRAPLIB_CALLBACK *)(cl_command_queue, cl_uint, void *[], void *), void *, cl_uint, const cl_event *, cl_event *);
    ON_ENTRY(clEnqueueSVMFree);
    f_ptr_t f = (f_ptr_t)(g_func_table[96]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
}
cl_int _WRAPLIB_API_CALL clEnqueueSVMMemcpy(cl_command_queue arg0, cl_bool arg1, void *arg2, const void *arg3, size_t arg4, cl_uint arg5, const cl_event *arg6, cl_event *arg7) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue, cl_bool, void *, const void *, size_t, cl_uint, const cl_event *, cl_event *);
    ON_ENTRY(clEnqueueSVMMemcpy);
    f_ptr_t f = (f_ptr_t)(g_func_table[97]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
}
cl_int _WRAPLIB_API_CALL clEnqueueSVMMemFill(cl_command_queue arg0, void *arg1, const void *arg2, size_t arg3, size_t arg4, cl_uint arg5, const cl_event *arg6, cl_event *arg7) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue, void *, const void *, size_t, size_t, cl_uint, const cl_event *, cl_event *);
    ON_ENTRY(clEnqueueSVMMemFill);
    f_ptr_t f = (f_ptr_t)(g_func_table[98]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
}
cl_int _WRAPLIB_API_CALL clEnqueueSVMMap(cl_command_queue arg0, cl_bool arg1, cl_map_flags arg2, void *arg3, size_t arg4, cl_uint arg5, const cl_event *arg6, cl_event *arg7) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue, cl_bool, cl_map_flags, void *, size_t, cl_uint, const cl_event *, cl_event *);
    ON_ENTRY(clEnqueueSVMMap);
    f_ptr_t f = (f_ptr_t)(g_func_table[99]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
}
cl_int _WRAPLIB_API_CALL clEnqueueSVMUnmap(cl_command_queue arg0, void *arg1, cl_uint arg2, const cl_event *arg3, cl_event *arg4) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue, void *, cl_uint, const cl_event *, cl_event *);
    ON_ENTRY(clEnqueueSVMUnmap);
    f_ptr_t f = (f_ptr_t)(g_func_table[100]);
    return f(arg0, arg1, arg2, arg3, arg4);
}
cl_int _WRAPLIB_API_CALL clEnqueueSVMMigrateMem(cl_command_queue arg0, cl_uint arg1, const void **arg2, const size_t *arg3, cl_mem_migration_flags arg4, cl_uint arg5, const cl_event *arg6, cl_event *arg7) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue, cl_uint, const void **, const size_t *, cl_mem_migration_flags, cl_uint, const cl_event *, cl_event *);
    ON_ENTRY(clEnqueueSVMMigrateMem);
    f_ptr_t f = (f_ptr_t)(g_func_table[101]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
}
void _WRAPLIB_API_CALL *clGetExtensionFunctionAddressForPlatform(cl_platform_id arg0, const char *arg1) {
    typedef void *(_WRAPLIB_API_CALL *f_ptr_t)(cl_platform_id, const char *);
    ON_ENTRY(clGetExtensionFunctionAddressForPlatform);
    f_ptr_t f = (f_ptr_t)(g_func_table[102]);
    return f(arg0, arg1);
}
cl_mem _WRAPLIB_API_CALL clCreateImage2D(cl_context arg0, cl_mem_flags arg1, const cl_image_format *arg2, size_t arg3, size_t arg4, size_t arg5, void *arg6, cl_int *arg7) {
    typedef cl_mem (_WRAPLIB_API_CALL *f_ptr_t)(cl_context, cl_mem_flags, const cl_image_format *, size_t, size_t, size_t, void *, cl_int *);
    ON_ENTRY(clCreateImage2D);
    f_ptr_t f = (f_ptr_t)(g_func_table[103]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
}
cl_mem _WRAPLIB_API_CALL clCreateImage3D(cl_context arg0, cl_mem_flags arg1, const cl_image_format *arg2, size_t arg3, size_t arg4, size_t arg5, size_t arg6, size_t arg7, void *arg8, cl_int *arg9) {
    typedef cl_mem (_WRAPLIB_API_CALL *f_ptr_t)(cl_context, cl_mem_flags, const cl_image_format *, size_t, size_t, size_t, size_t, size_t, void *, cl_int *);
    ON_ENTRY(clCreateImage3D);
    f_ptr_t f = (f_ptr_t)(g_func_table[104]);
    return f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
}
cl_int _WRAPLIB_API_CALL clEnqueueMarker(cl_command_queue arg0, cl_event *arg1) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue, cl_event *);
    ON_ENTRY(clEnqueueMarker);
    f_ptr_t f = (f_ptr_t)(g_func_table[105]);
    return f(arg0, arg1);
}
cl_int _WRAPLIB_API_CALL clEnqueueWaitForEvents(cl_command_queue arg0, cl_uint arg1, const cl_event *arg2) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue, cl_uint, const cl_event *);
    ON_ENTRY(clEnqueueWaitForEvents);
    f_ptr_t f = (f_ptr_t)(g_func_table[106]);
    return f(arg0, arg1, arg2);
}
cl_int _WRAPLIB_API_CALL clEnqueueBarrier(cl_command_queue arg0) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue);
    ON_ENTRY(clEnqueueBarrier);
    f_ptr_t f = (f_ptr_t)(g_func_table[107]);
    return f(arg0);
}
cl_int _WRAPLIB_API_CALL clUnloadCompiler() {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)();
    ON_ENTRY(clUnloadCompiler);
    f_ptr_t f = (f_ptr_t)(g_func_table[108]);
    return f();
}
void _WRAPLIB_API_CALL *clGetExtensionFunctionAddress(const char *arg0) {
    typedef void *(_WRAPLIB_API_CALL *f_ptr_t)(const char *);
    ON_ENTRY(clGetExtensionFunctionAddress);
    f_ptr_t f = (f_ptr_t)(g_func_table[109]);
    return f(arg0);
}
cl_command_queue _WRAPLIB_API_CALL clCreateCommandQueue(cl_context arg0, cl_device_id arg1, cl_command_queue_properties arg2, cl_int *arg3) {
    typedef cl_command_queue (_WRAPLIB_API_CALL *f_ptr_t)(cl_context, cl_device_id, cl_command_queue_properties, cl_int *);
    ON_ENTRY(clCreateCommandQueue);
    f_ptr_t f = (f_ptr_t)(g_func_table[110]);
    return f(arg0, arg1, arg2, arg3);
}
cl_sampler _WRAPLIB_API_CALL clCreateSampler(cl_context arg0, cl_bool arg1, cl_addressing_mode arg2, cl_filter_mode arg3, cl_int *arg4) {
    typedef cl_sampler (_WRAPLIB_API_CALL *f_ptr_t)(cl_context, cl_bool, cl_addressing_mode, cl_filter_mode, cl_int *);
    ON_ENTRY(clCreateSampler);
    f_ptr_t f = (f_ptr_t)(g_func_table[111]);
    return f(arg0, arg1, arg2, arg3, arg4);
}
cl_int _WRAPLIB_API_CALL clEnqueueTask(cl_command_queue arg0, cl_kernel arg1, cl_uint arg2, const cl_event *arg3, cl_event *arg4) {
    typedef cl_int (_WRAPLIB_API_CALL *f_ptr_t)(cl_command_queue, cl_kernel, cl_uint, const cl_event *, cl_event *);
    ON_ENTRY(clEnqueueTask);
    f_ptr_t f = (f_ptr_t)(g_func_table[112]);
    return f(arg0, arg1, arg2, arg3, arg4);
}
